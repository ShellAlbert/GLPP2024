
PSU_L051C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080037ac  080037ac  000047ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b4  080037b4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080037bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20000060  0800381c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  0800381c  00005c58  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dea  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b2  00000000  00000000  0001ae72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001136  00000000  00000000  0001e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013901  00000000  00000000  0001f51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c5c  00000000  00000000  00032e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007512e  00000000  00000000  0004ca7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  000c1bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000abed  00000000  00000000  000c4394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000cef81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003734 	.word	0x08003734

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003734 	.word	0x08003734

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc81 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8a1 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fa49 	bl	8000970 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004de:	f000 f90f 	bl	8000700 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f93b 	bl	800075c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f969 	bl	80007bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004ea:	f000 f997 	bl	800081c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ee:	f000 f9cd 	bl	800088c <MX_SPI2_Init>
  MX_TIM6_Init();
 80004f2:	f000 fa03 	bl	80008fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	//Fiber_UART  ---- FPGA 1# UART. (Infra-red Image Sensor)
	//            ---- FPGA 2# UART. (Visible-Light Image Sensor)
	//            ---- MCU LPUART1. (Photo-voltaic Cell: Power Supply Unit)
	//In TMR project, route Fiber_UART to MCU LPUART.
	HAL_GPIO_WritePin(GPIOA, ROUTE_A0_Pin | ROUTE_A1_Pin, GPIO_PIN_RESET);
 80004f6:	23a0      	movs	r3, #160	@ 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2200      	movs	r2, #0
 80004fc:	2103      	movs	r1, #3
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fe36 	bl	8001170 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Step1: SDI (always keeps HIGH).
	uint16_t SDI_Data1 = 0xFFFF;
 8000504:	2122      	movs	r1, #34	@ 0x22
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	4252      	negs	r2, r2
 800050c:	801a      	strh	r2, [r3, #0]
	//Transmit an amount of data in blocking mode.
	//HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &SDI_Data1, 1, 0xFFFF);
 800050e:	4b3a      	ldr	r3, [pc, #232]	@ (80005f8 <main+0x12c>)
 8000510:	1879      	adds	r1, r7, r1
 8000512:	483a      	ldr	r0, [pc, #232]	@ (80005fc <main+0x130>)
 8000514:	2201      	movs	r2, #1
 8000516:	f001 fc65 	bl	8001de4 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f000 fc82 	bl	8000e24 <HAL_Delay>
#endif

//We sample data continuously to fill buffer, then send data out.
//to find out where the bottleneck is.
#if 1
	gSPI_WrPtr1=0;
 8000520:	4b37      	ldr	r3, [pc, #220]	@ (8000600 <main+0x134>)
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	gSPI_RdPtr1=0;
 8000526:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <main+0x138>)
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]
	do {
		uint8_t buffer_format[32]; //Maximum value: strlen($65535;)=8

		//Step2: Pull up CNV to generate a rising edge.
		//HAL_GPIO_WritePin(GPIOB, ADC_CNV_Pin, GPIO_PIN_SET);
		GPIOB->BSRR |= ADC_CNV_Pin; //Using Register Operation replace of HAL library.
 800052c:	4b36      	ldr	r3, [pc, #216]	@ (8000608 <main+0x13c>)
 800052e:	699a      	ldr	r2, [r3, #24]
 8000530:	4b35      	ldr	r3, [pc, #212]	@ (8000608 <main+0x13c>)
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	0149      	lsls	r1, r1, #5
 8000536:	430a      	orrs	r2, r1
 8000538:	619a      	str	r2, [r3, #24]
		//__NOP(); //2.2uS*5=11uS.
		//My_NOP_Delay(5);

		//Step4:Pull-down CNV, start to read data.
		//HAL_GPIO_WritePin(GPIOB, ADC_CNV_Pin, GPIO_PIN_RESET);
		GPIOB->BRR |= ADC_CNV_Pin; //Using Register Operation replace of HAL library.
 800053a:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <main+0x13c>)
 800053c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800053e:	4b32      	ldr	r3, [pc, #200]	@ (8000608 <main+0x13c>)
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	0149      	lsls	r1, r1, #5
 8000544:	430a      	orrs	r2, r1
 8000546:	629a      	str	r2, [r3, #40]	@ 0x28
		//HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
		//HAL_SPI_TransmitReceive_IT(&hspi2, ///<
		//		(uint8_t*) &SDI_Data1, ///<
		//		(uint8_t*) &gSPI_Buffer1[gSPI_WrPtr1++], ///<
		//		2);
		hspi2.Instance->DR=0xFFFF; //MOSI keeps HIGH while reading MISO.
 8000548:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <main+0x130>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a2a      	ldr	r2, [pc, #168]	@ (80005f8 <main+0x12c>)
 800054e:	60da      	str	r2, [r3, #12]
		while(!(hspi2.Instance->SR & SPI_FLAG_RXNE))
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <main+0x130>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	2201      	movs	r2, #1
 800055a:	4013      	ands	r3, r2
 800055c:	d0f9      	beq.n	8000552 <main+0x86>
		{
			//Waiting for Receive Buffer Not Empty.
		}
		gSPI_Buffer1[gSPI_WrPtr1]=hspi2.Instance->DR; //Read
 800055e:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <main+0x130>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68d9      	ldr	r1, [r3, #12]
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <main+0x134>)
 8000566:	2200      	movs	r2, #0
 8000568:	5e9b      	ldrsh	r3, [r3, r2]
 800056a:	001a      	movs	r2, r3
 800056c:	b289      	uxth	r1, r1
 800056e:	4b27      	ldr	r3, [pc, #156]	@ (800060c <main+0x140>)
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	52d1      	strh	r1, [r2, r3]
		//My_Delay_us(1);
		//__NOP();
		//My_NOP_Delay(1);

		//if sample number reaches 1024, break down.
		if (gSPI_WrPtr1 >= (1024 - 1)) {
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <main+0x134>)
 8000576:	2200      	movs	r2, #0
 8000578:	5e9b      	ldrsh	r3, [r3, r2]
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <main+0x144>)
 800057c:	4293      	cmp	r3, r2
 800057e:	dd02      	ble.n	8000586 <main+0xba>
//		gSPI_RdPtr1=(gSPI_RdPtr1>=1023)?(0):(gSPI_RdPtr1++);
//		}
	} while (1);

	//Send data out via LPUART1, check SIN wave in Serial Plotter to see if we get a perfect SIN wave.
	for (i = 0; i < (1024 - 1); i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
 8000584:	e029      	b.n	80005da <main+0x10e>
			gSPI_WrPtr1++;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <main+0x134>)
 8000588:	2200      	movs	r2, #0
 800058a:	5e9b      	ldrsh	r3, [r3, r2]
 800058c:	b29b      	uxth	r3, r3
 800058e:	3301      	adds	r3, #1
 8000590:	b29b      	uxth	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <main+0x134>)
 8000596:	801a      	strh	r2, [r3, #0]
	do {
 8000598:	e7c8      	b.n	800052c <main+0x60>
		uint8_t buffer_format[32]; //Maximum value: strlen($65535;)=8
		sprintf((char*) buffer_format, "$%d;", gSPI_Buffer1[gSPI_RdPtr1++]);
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0x138>)
 800059c:	2200      	movs	r2, #0
 800059e:	5e9a      	ldrsh	r2, [r3, r2]
 80005a0:	b293      	uxth	r3, r2
 80005a2:	3301      	adds	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b219      	sxth	r1, r3
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0x138>)
 80005aa:	8019      	strh	r1, [r3, #0]
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <main+0x140>)
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	5ad3      	ldrh	r3, [r2, r3]
 80005b2:	001a      	movs	r2, r3
 80005b4:	4917      	ldr	r1, [pc, #92]	@ (8000614 <main+0x148>)
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fc1d 	bl	8002df8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, ///<
				(const uint8_t*) buffer_format, ///<
				strlen((char*) buffer_format), 0xFFFF);
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff fda1 	bl	8000108 <strlen>
 80005c6:	0003      	movs	r3, r0
		HAL_UART_Transmit(&hlpuart1, ///<
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <main+0x12c>)
 80005cc:	0039      	movs	r1, r7
 80005ce:	4812      	ldr	r0, [pc, #72]	@ (8000618 <main+0x14c>)
 80005d0:	f001 fe3a 	bl	8002248 <HAL_UART_Transmit>
	for (i = 0; i < (1024 - 1); i++) {
 80005d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d6:	3301      	adds	r3, #1
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <main+0x144>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d9db      	bls.n	800059a <main+0xce>

	}

	//Stop Here. Go to check SIN wave.
	gSPI_RdPtr1=0;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <main+0x138>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
	gSPI_WrPtr1=0;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <main+0x134>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	801a      	strh	r2, [r3, #0]
 80005ee:	2300      	movs	r3, #0
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b00a      	add	sp, #40	@ 0x28
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0000ffff 	.word	0x0000ffff
 80005fc:	2000026c 	.word	0x2000026c
 8000600:	20000000 	.word	0x20000000
 8000604:	20000b04 	.word	0x20000b04
 8000608:	50000400 	.word	0x50000400
 800060c:	20000304 	.word	0x20000304
 8000610:	000003fe 	.word	0x000003fe
 8000614:	0800374c 	.word	0x0800374c
 8000618:	2000007c 	.word	0x2000007c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b09b      	sub	sp, #108	@ 0x6c
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	2434      	movs	r4, #52	@ 0x34
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2334      	movs	r3, #52	@ 0x34
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fc03 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000632:	2320      	movs	r3, #32
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	0018      	movs	r0, r3
 8000638:	2314      	movs	r3, #20
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f002 fbfb 	bl	8002e38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	231c      	movs	r3, #28
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 fbf4 	bl	8002e38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <SystemClock_Config+0xdc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a29      	ldr	r2, [pc, #164]	@ (80006fc <SystemClock_Config+0xe0>)
 8000656:	401a      	ands	r2, r3
 8000658:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <SystemClock_Config+0xdc>)
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	0109      	lsls	r1, r1, #4
 800065e:	430a      	orrs	r2, r1
 8000660:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	22a0      	movs	r2, #160	@ 0xa0
 800066c:	02d2      	lsls	r2, r2, #11
 800066e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fe33 	bl	80012e4 <HAL_RCC_OscConfig>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000682:	f000 fa21 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	2120      	movs	r1, #32
 8000688:	187b      	adds	r3, r7, r1
 800068a:	220f      	movs	r2, #15
 800068c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2101      	movs	r1, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 f8c2 	bl	8001834 <HAL_RCC_ClockConfig>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 fa08 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2207      	movs	r2, #7
 80006bc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f9bc 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f9f4 	bl	8000ac8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	045b      	lsls	r3, r3, #17
 80006e4:	2200      	movs	r2, #0
 80006e6:	0019      	movs	r1, r3
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fd47 	bl	800117c <HAL_RCC_MCOConfig>
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b01b      	add	sp, #108	@ 0x6c
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40007000 	.word	0x40007000
 80006fc:	ffffe7ff 	.word	0xffffe7ff

08000700 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_LPUART1_UART_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 4000000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_LPUART1_UART_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000724:	220c      	movs	r2, #12
 8000726:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <MX_LPUART1_UART_Init+0x50>)
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fa23 	bl	8002b88 <HAL_UART_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f9bf 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000007c 	.word	0x2000007c
 8000754:	40004800 	.word	0x40004800
 8000758:	003d0900 	.word	0x003d0900

0800075c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <MX_USART1_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000768:	22e1      	movs	r2, #225	@ 0xe1
 800076a:	0252      	lsls	r2, r2, #9
 800076c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <MX_USART1_UART_Init+0x58>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 f9f1 	bl	8002b88 <HAL_UART_Init>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f98d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000104 	.word	0x20000104
 80007b8:	40013800 	.word	0x40013800

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	22e1      	movs	r2, #225	@ 0xe1
 80007ca:	0252      	lsls	r2, r2, #9
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	0018      	movs	r0, r3
 8000802:	f002 f9c1 	bl	8002b88 <HAL_UART_Init>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f95d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000018c 	.word	0x2000018c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000822:	4a19      	ldr	r2, [pc, #100]	@ (8000888 <MX_SPI1_Init+0x6c>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000828:	2282      	movs	r2, #130	@ 0x82
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_SPI1_Init+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	02d2      	lsls	r2, r2, #11
 800084c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_SPI1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_SPI1_Init+0x68>)
 8000868:	2207      	movs	r2, #7
 800086a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <MX_SPI1_Init+0x68>)
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fa36 	bl	8001ce0 <HAL_SPI_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 f926 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	20000214 	.word	0x20000214
 8000888:	40013000 	.word	0x40013000

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI2_Init+0x68>)
 8000892:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <MX_SPI2_Init+0x6c>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI2_Init+0x68>)
 8000898:	2282      	movs	r2, #130	@ 0x82
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008c2:	2218      	movs	r2, #24
 80008c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008da:	2207      	movs	r2, #7
 80008dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <MX_SPI2_Init+0x68>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f9fd 	bl	8001ce0 <HAL_SPI_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80008ea:	f000 f8ed 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000026c 	.word	0x2000026c
 80008f8:	40003800 	.word	0x40003800

080008fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000902:	003b      	movs	r3, r7
 8000904:	0018      	movs	r0, r3
 8000906:	2308      	movs	r3, #8
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fa94 	bl	8002e38 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_TIM6_Init+0x6c>)
 8000912:	4a16      	ldr	r2, [pc, #88]	@ (800096c <MX_TIM6_Init+0x70>)
 8000914:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4-1;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_TIM6_Init+0x6c>)
 8000918:	2203      	movs	r2, #3
 800091a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_TIM6_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_TIM6_Init+0x6c>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_TIM6_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_TIM6_Init+0x6c>)
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fc15 	bl	8002160 <HAL_TIM_Base_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800093a:	f000 f8c5 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	003b      	movs	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800094a:	003a      	movs	r2, r7
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_TIM6_Init+0x6c>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fc4b 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800095a:	f000 f8b5 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	200002c4 	.word	0x200002c4
 800096c:	40001000 	.word	0x40001000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b08b      	sub	sp, #44	@ 0x2c
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	2414      	movs	r4, #20
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f002 fa59 	bl	8002e38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 8000988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800098a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 800098c:	2104      	movs	r1, #4
 800098e:	430a      	orrs	r2, r1
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000992:	4b49      	ldr	r3, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 8000994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000996:	2204      	movs	r2, #4
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009a2:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009a4:	2180      	movs	r1, #128	@ 0x80
 80009a6:	430a      	orrs	r2, r1
 80009a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009aa:	4b43      	ldr	r3, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b40      	ldr	r3, [pc, #256]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ba:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009d2:	4b39      	ldr	r3, [pc, #228]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009d4:	2102      	movs	r1, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009da:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <MX_GPIO_Init+0x148>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009de:	2202      	movs	r2, #2
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROUTE_A0_Pin|ROUTE_A1_Pin, GPIO_PIN_RESET);
 80009e6:	23a0      	movs	r3, #160	@ 0xa0
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	2200      	movs	r2, #0
 80009ec:	2103      	movs	r1, #3
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fbbe 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80009f4:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_GPIO_Init+0x14c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	2101      	movs	r1, #1
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fbb8 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IAM_ALIVE_Pin|ADC_CNV_Pin|TEST_SIG_Pin, GPIO_PIN_RESET);
 8000a00:	492f      	ldr	r1, [pc, #188]	@ (8000ac0 <MX_GPIO_Init+0x150>)
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_GPIO_Init+0x14c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fbb2 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROUTE_A0_Pin ROUTE_A1_Pin */
  GPIO_InitStruct.Pin = ROUTE_A0_Pin|ROUTE_A1_Pin;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2203      	movs	r2, #3
 8000a10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2201      	movs	r2, #1
 8000a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2203      	movs	r2, #3
 8000a22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	193a      	adds	r2, r7, r4
 8000a26:	23a0      	movs	r3, #160	@ 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 fa9f 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_EN_Pin IAM_ALIVE_Pin ADC_CNV_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin|IAM_ALIVE_Pin|ADC_CNV_Pin;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <MX_GPIO_Init+0x154>)
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2201      	movs	r2, #1
 8000a42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2203      	movs	r2, #3
 8000a48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <MX_GPIO_Init+0x14c>)
 8000a4e:	0019      	movs	r1, r3
 8000a50:	0010      	movs	r0, r2
 8000a52:	f000 fa8d 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	000c      	movs	r4, r1
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2202      	movs	r2, #2
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	193a      	adds	r2, r7, r4
 8000a7c:	23a0      	movs	r3, #160	@ 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fa74 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_SIG_Pin */
  GPIO_InitStruct.Pin = TEST_SIG_Pin;
 8000a88:	0021      	movs	r1, r4
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2280      	movs	r2, #128	@ 0x80
 8000a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_SIG_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <MX_GPIO_Init+0x14c>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 fa61 	bl	8000f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b00b      	add	sp, #44	@ 0x2c
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	50000400 	.word	0x50000400
 8000ac0:	00001082 	.word	0x00001082
 8000ac4:	00001003 	.word	0x00001003

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_MspInit+0x18>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ae2:	0552      	lsls	r2, r2, #21
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	4770      	bx	lr
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b510      	push	{r4, lr}
 8000af2:	0004      	movs	r4, r0
 8000af4:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	2214      	movs	r2, #20
 8000af8:	2100      	movs	r1, #0
 8000afa:	a804      	add	r0, sp, #16
 8000afc:	f002 f99c 	bl	8002e38 <memset>
  if(huart->Instance==LPUART1)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <HAL_UART_MspInit+0xcc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d007      	beq.n	8000b18 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8000b08:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc0 <HAL_UART_MspInit+0xd0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d028      	beq.n	8000b60 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <HAL_UART_MspInit+0xd4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d042      	beq.n	8000b9a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b14:	b00a      	add	sp, #40	@ 0x28
 8000b16:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <HAL_UART_MspInit+0xd8>)
 8000b1c:	02d2      	lsls	r2, r2, #11
 8000b1e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	482a      	ldr	r0, [pc, #168]	@ (8000bcc <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b22:	430a      	orrs	r2, r1
 8000b24:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2202      	movs	r2, #2
 8000b28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b2a:	4311      	orrs	r1, r2
 8000b2c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	401a      	ands	r2, r3
 8000b34:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b36:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	9204      	str	r2, [sp, #16]
 8000b40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000b46:	3301      	adds	r3, #1
 8000b48:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f000 fa11 	bl	8000f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	201d      	movs	r0, #29
 8000b54:	f000 f978 	bl	8000e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b58:	201d      	movs	r0, #29
 8000b5a:	f000 f99f 	bl	8000e9c <HAL_NVIC_EnableIRQ>
 8000b5e:	e7d9      	b.n	8000b14 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_UART_MspInit+0xd8>)
 8000b64:	01d2      	lsls	r2, r2, #7
 8000b66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b70:	4311      	orrs	r1, r2
 8000b72:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	401a      	ands	r2, r3
 8000b78:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b7a:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b7e:	00d2      	lsls	r2, r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b80:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b84:	9204      	str	r2, [sp, #16]
 8000b86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b90:	3301      	adds	r3, #1
 8000b92:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f000 f9ec 	bl	8000f70 <HAL_GPIO_Init>
}
 8000b98:	e7bc      	b.n	8000b14 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_UART_MspInit+0xd8>)
 8000b9e:	0292      	lsls	r2, r2, #10
 8000ba0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000baa:	4311      	orrs	r1, r2
 8000bac:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	9203      	str	r2, [sp, #12]
 8000bb4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	e7e2      	b.n	8000b80 <HAL_UART_MspInit+0x90>
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	40004800 	.word	0x40004800
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	50000400 	.word	0x50000400

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	0004      	movs	r4, r0
 8000bd4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	2100      	movs	r1, #0
 8000bda:	a802      	add	r0, sp, #8
 8000bdc:	f002 f92c 	bl	8002e38 <memset>
  if(hspi->Instance==SPI1)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <HAL_SPI_MspInit+0x9c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d004      	beq.n	8000bf2 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8000be8:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <HAL_SPI_MspInit+0xa0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01b      	beq.n	8000c26 <HAL_SPI_MspInit+0x56>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bee:	b008      	add	sp, #32
 8000bf0:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <HAL_SPI_MspInit+0xa4>)
 8000bf6:	0152      	lsls	r2, r2, #5
 8000bf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2201      	movs	r2, #1
 8000c02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4311      	orrs	r1, r2
 8000c08:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	401a      	ands	r2, r3
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c14:	22f0      	movs	r2, #240	@ 0xf0
 8000c16:	2302      	movs	r3, #2
 8000c18:	9202      	str	r2, [sp, #8]
 8000c1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f000 f9a6 	bl	8000f70 <HAL_GPIO_Init>
 8000c24:	e7e3      	b.n	8000bee <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c26:	2280      	movs	r2, #128	@ 0x80
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_SPI_MspInit+0xa4>)
 8000c2a:	01d2      	lsls	r2, r2, #7
 8000c2c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c30:	430a      	orrs	r2, r1
 8000c32:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	2202      	movs	r2, #2
 8000c36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c38:	4311      	orrs	r1, r2
 8000c3a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	401a      	ands	r2, r3
 8000c42:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c44:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	0212      	lsls	r2, r2, #8
 8000c4c:	9202      	str	r2, [sp, #8]
 8000c4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f000 f98c 	bl	8000f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	201a      	movs	r0, #26
 8000c5e:	f000 f8f3 	bl	8000e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c62:	201a      	movs	r0, #26
 8000c64:	f000 f91a 	bl	8000e9c <HAL_NVIC_EnableIRQ>
}
 8000c68:	e7c1      	b.n	8000bee <HAL_SPI_MspInit+0x1e>
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40003800 	.word	0x40003800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	50000400 	.word	0x50000400

08000c7c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_TIM_Base_MspInit+0x18>)
 8000c7e:	6802      	ldr	r2, [r0, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d000      	beq.n	8000c86 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c84:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c86:	2110      	movs	r1, #16
 8000c88:	4a03      	ldr	r2, [pc, #12]	@ (8000c98 <HAL_TIM_Base_MspInit+0x1c>)
 8000c8a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c90:	e7f8      	b.n	8000c84 <HAL_TIM_Base_MspInit+0x8>
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	40001000 	.word	0x40001000
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler>
 8000c9e:	46c0      	nop			@ (mov r8, r8)

08000ca0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <HardFault_Handler>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca4:	4770      	bx	lr
 8000ca6:	46c0      	nop			@ (mov r8, r8)

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000ca8:	4770      	bx	lr
 8000caa:	46c0      	nop			@ (mov r8, r8)

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f8a7 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bd10      	pop	{r4, pc}

08000cb4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000cb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */
  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000cb6:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <SPI2_IRQHandler+0xc>)
 8000cb8:	f001 f9c6 	bl	8002048 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  /* USER CODE END SPI2_IRQn 1 */
}
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	2000026c 	.word	0x2000026c

08000cc4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000cc6:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <LPUART1_IRQHandler+0xc>)
 8000cc8:	f001 fbe0 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	2000007c 	.word	0x2000007c

08000cd4 <HAL_UART_TxCpltCallback>:
//		}
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==LPUART1)
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <HAL_UART_TxCpltCallback+0x14>)
 8000cd6:	6802      	ldr	r2, [r0, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d000      	beq.n	8000cde <HAL_UART_TxCpltCallback+0xa>
//			gSPI_RdPtr=0;
//		}else{
//			gSPI_RdPtr++;
//		}
	}
}
 8000cdc:	4770      	bx	lr
		gUART_TxDone=1; //Set TxDone Flag.
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4b02      	ldr	r3, [pc, #8]	@ (8000cec <HAL_UART_TxCpltCallback+0x18>)
 8000ce2:	701a      	strb	r2, [r3, #0]
}
 8000ce4:	e7fa      	b.n	8000cdc <HAL_UART_TxCpltCallback+0x8>
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	20000002 	.word	0x20000002

08000cf0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <_sbrk+0x34>)
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <_sbrk+0x38>)
{
 8000cf4:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf6:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <_sbrk+0x3c>)
{
 8000cfa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000cfc:	6808      	ldr	r0, [r1, #0]
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d004      	beq.n	8000d0c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	18c3      	adds	r3, r0, r3
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d806      	bhi.n	8000d16 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d08:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000d0a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d0c:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000d10:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d9f8      	bls.n	8000d08 <_sbrk+0x18>
    errno = ENOMEM;
 8000d16:	f002 f897 	bl	8002e48 <__errno>
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4240      	negs	r0, r0
 8000d22:	e7f2      	b.n	8000d0a <_sbrk+0x1a>
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20002000 	.word	0x20002000
 8000d2c:	20000b08 	.word	0x20000b08
 8000d30:	20000c58 	.word	0x20000c58

08000d34 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	4770      	bx	lr
 8000d36:	46c0      	nop			@ (mov r8, r8)

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fffa 	bl	8000d34 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 f875 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbaf 	bl	80004cc <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
   ldr   r0, =_estack
 8000d70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d7c:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 8000d80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d84:	20000c58 	.word	0x20000c58

08000d88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_COMP_IRQHandler>
	...

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	20fa      	movs	r0, #250	@ 0xfa
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_InitTick+0x40>)
 8000d94:	0080      	lsls	r0, r0, #2
 8000d96:	7819      	ldrb	r1, [r3, #0]
 8000d98:	f7ff f9c8 	bl	800012c <__udivsi3>
 8000d9c:	4d0c      	ldr	r5, [pc, #48]	@ (8000dd0 <HAL_InitTick+0x44>)
 8000d9e:	0001      	movs	r1, r0
 8000da0:	6828      	ldr	r0, [r5, #0]
 8000da2:	f7ff f9c3 	bl	800012c <__udivsi3>
 8000da6:	f000 f885 	bl	8000eb4 <HAL_SYSTICK_Config>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000dae:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	2c03      	cmp	r4, #3
 8000db2:	d900      	bls.n	8000db6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db6:	3802      	subs	r0, #2
 8000db8:	2200      	movs	r2, #0
 8000dba:	0021      	movs	r1, r4
 8000dbc:	f000 f844 	bl	8000e48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <HAL_InitTick+0x48>)
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000dc6:	e7f5      	b.n	8000db4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
 8000dca:	e7f3      	b.n	8000db4 <HAL_InitTick+0x28>
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	2000000c 	.word	0x2000000c

08000dd8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dd8:	2140      	movs	r1, #64	@ 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_Init+0x24>)
{
 8000ddc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dde:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de0:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000de2:	430b      	orrs	r3, r1
 8000de4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	f7ff ffd1 	bl	8000d8c <HAL_InitTick>
 8000dea:	1e04      	subs	r4, r0, #0
 8000dec:	d002      	beq.n	8000df4 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000dee:	2401      	movs	r4, #1
}
 8000df0:	0020      	movs	r0, r4
 8000df2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000df4:	f7ff fe6e 	bl	8000ad4 <HAL_MspInit>
 8000df8:	e7fa      	b.n	8000df0 <HAL_Init+0x18>
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e00:	4a03      	ldr	r2, [pc, #12]	@ (8000e10 <HAL_IncTick+0x10>)
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_IncTick+0x14>)
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	185b      	adds	r3, r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	20000b0c 	.word	0x20000b0c
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e18:	4b01      	ldr	r3, [pc, #4]	@ (8000e20 <HAL_GetTick+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	20000b0c 	.word	0x20000b0c

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff6 	bl	8000e18 <HAL_GetTick>
 8000e2c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	1c63      	adds	r3, r4, #1
 8000e30:	d002      	beq.n	8000e38 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <HAL_Delay+0x20>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	1b40      	subs	r0, r0, r5
 8000e3e:	42a0      	cmp	r0, r4
 8000e40:	d3fa      	bcc.n	8000e38 <HAL_Delay+0x14>
  {
  }
}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	22ff      	movs	r2, #255	@ 0xff
 8000e4a:	2303      	movs	r3, #3
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	0014      	movs	r4, r2
 8000e50:	4003      	ands	r3, r0
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e56:	0189      	lsls	r1, r1, #6
 8000e58:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	db0b      	blt.n	8000e7a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_NVIC_SetPriority+0x4c>)
 8000e64:	21c0      	movs	r1, #192	@ 0xc0
 8000e66:	469c      	mov	ip, r3
 8000e68:	0880      	lsrs	r0, r0, #2
 8000e6a:	0080      	lsls	r0, r0, #2
 8000e6c:	4460      	add	r0, ip
 8000e6e:	0089      	lsls	r1, r1, #2
 8000e70:	5843      	ldr	r3, [r0, r1]
 8000e72:	4023      	ands	r3, r4
 8000e74:	4313      	orrs	r3, r2
 8000e76:	5043      	str	r3, [r0, r1]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000e78:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	4906      	ldr	r1, [pc, #24]	@ (8000e98 <HAL_NVIC_SetPriority+0x50>)
 8000e7e:	4003      	ands	r3, r0
 8000e80:	468c      	mov	ip, r1
 8000e82:	3b08      	subs	r3, #8
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4463      	add	r3, ip
 8000e8a:	69d9      	ldr	r1, [r3, #28]
 8000e8c:	400c      	ands	r4, r1
 8000e8e:	4314      	orrs	r4, r2
 8000e90:	61dc      	str	r4, [r3, #28]
 8000e92:	e7f1      	b.n	8000e78 <HAL_NVIC_SetPriority+0x30>
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	db05      	blt.n	8000eac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea0:	221f      	movs	r2, #31
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	4002      	ands	r2, r0
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	4a01      	ldr	r2, [pc, #4]	@ (8000eb0 <HAL_NVIC_EnableIRQ+0x14>)
 8000eaa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	1e43      	subs	r3, r0, #1
 8000eb8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d20e      	bcs.n	8000ede <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec8:	6a03      	ldr	r3, [r0, #32]
 8000eca:	0609      	lsls	r1, r1, #24
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	3307      	adds	r3, #7
 8000edc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ede:	4770      	bx	lr
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee8:	2225      	movs	r2, #37	@ 0x25
{
 8000eea:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eec:	5c81      	ldrb	r1, [r0, r2]
{
 8000eee:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef0:	2902      	cmp	r1, #2
 8000ef2:	d006      	beq.n	8000f02 <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	3a21      	subs	r2, #33	@ 0x21
 8000ef6:	63c2      	str	r2, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000efa:	2224      	movs	r2, #36	@ 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8000f00:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f02:	240e      	movs	r4, #14
 8000f04:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f06:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f08:	6808      	ldr	r0, [r1, #0]
 8000f0a:	43a0      	bics	r0, r4
 8000f0c:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	680c      	ldr	r4, [r1, #0]
 8000f12:	4384      	bics	r4, r0
 8000f14:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f16:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f18:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8000f1a:	4029      	ands	r1, r5
 8000f1c:	0005      	movs	r5, r0
 8000f1e:	408d      	lsls	r5, r1
 8000f20:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f22:	5498      	strb	r0, [r3, r2]
    return status;
 8000f24:	2000      	movs	r0, #0
 8000f26:	e7e8      	b.n	8000efa <HAL_DMA_Abort+0x12>

08000f28 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f28:	2325      	movs	r3, #37	@ 0x25
{
 8000f2a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f2c:	5cc2      	ldrb	r2, [r0, r3]
 8000f2e:	2a02      	cmp	r2, #2
 8000f30:	d003      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	3b21      	subs	r3, #33	@ 0x21
 8000f34:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f36:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3a:	240e      	movs	r4, #14
 8000f3c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f3e:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	43a1      	bics	r1, r4
 8000f44:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f46:	2101      	movs	r1, #1
 8000f48:	6814      	ldr	r4, [r2, #0]
 8000f4a:	438c      	bics	r4, r1
 8000f4c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f4e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8000f50:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8000f52:	402a      	ands	r2, r5
 8000f54:	000d      	movs	r5, r1
 8000f56:	4095      	lsls	r5, r2
    __HAL_UNLOCK(hdma);
 8000f58:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f5a:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000f5e:	2324      	movs	r3, #36	@ 0x24
 8000f60:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000f62:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d000      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000f68:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e7e4      	b.n	8000f38 <HAL_DMA_Abort_IT+0x10>
 8000f6e:	46c0      	nop			@ (mov r8, r8)

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	46de      	mov	lr, fp
 8000f74:	4657      	mov	r7, sl
 8000f76:	464e      	mov	r6, r9
 8000f78:	4645      	mov	r5, r8
 8000f7a:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f7c:	680c      	ldr	r4, [r1, #0]
{
 8000f7e:	468b      	mov	fp, r1
  uint32_t position = 0x00U;
 8000f80:	2300      	movs	r3, #0
{
 8000f82:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d06b      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	4694      	mov	ip, r2
 8000f8e:	4022      	ands	r2, r4
 8000f90:	4692      	mov	sl, r2

    if (iocurrent)
 8000f92:	4662      	mov	r2, ip
 8000f94:	4214      	tst	r4, r2
 8000f96:	d05f      	beq.n	8001058 <HAL_GPIO_Init+0xe8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f98:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f9a:	465a      	mov	r2, fp
 8000f9c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f9e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa0:	6855      	ldr	r5, [r2, #4]
 8000fa2:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fa4:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa6:	402a      	ands	r2, r5
 8000fa8:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000faa:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	2e01      	cmp	r6, #1
 8000fae:	d95e      	bls.n	800106e <HAL_GPIO_Init+0xfe>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	2a03      	cmp	r2, #3
 8000fb2:	d000      	beq.n	8000fb6 <HAL_GPIO_Init+0x46>
 8000fb4:	e0b0      	b.n	8001118 <HAL_GPIO_Init+0x1a8>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000fb8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fba:	9900      	ldr	r1, [sp, #0]
 8000fbc:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000fc0:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc2:	22c0      	movs	r2, #192	@ 0xc0
 8000fc4:	0292      	lsls	r2, r2, #10
 8000fc6:	4215      	tst	r5, r2
 8000fc8:	d046      	beq.n	8001058 <HAL_GPIO_Init+0xe8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2601      	movs	r6, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fcc:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4961      	ldr	r1, [pc, #388]	@ (8001154 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fd0:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fd4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4332      	orrs	r2, r6
 8000fd8:	634a      	str	r2, [r1, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	495f      	ldr	r1, [pc, #380]	@ (8001158 <HAL_GPIO_Init+0x1e8>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fdc:	360e      	adds	r6, #14
 8000fde:	468c      	mov	ip, r1
 8000fe0:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	089a      	lsrs	r2, r3, #2
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4462      	add	r2, ip
 8000fe8:	6891      	ldr	r1, [r2, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fea:	43b1      	bics	r1, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fec:	26a0      	movs	r6, #160	@ 0xa0
 8000fee:	05f6      	lsls	r6, r6, #23
 8000ff0:	42b0      	cmp	r0, r6
 8000ff2:	d012      	beq.n	800101a <HAL_GPIO_Init+0xaa>
 8000ff4:	4e59      	ldr	r6, [pc, #356]	@ (800115c <HAL_GPIO_Init+0x1ec>)
 8000ff6:	42b0      	cmp	r0, r6
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x8c>
 8000ffa:	e09e      	b.n	800113a <HAL_GPIO_Init+0x1ca>
 8000ffc:	4e58      	ldr	r6, [pc, #352]	@ (8001160 <HAL_GPIO_Init+0x1f0>)
 8000ffe:	42b0      	cmp	r0, r6
 8001000:	d100      	bne.n	8001004 <HAL_GPIO_Init+0x94>
 8001002:	e09e      	b.n	8001142 <HAL_GPIO_Init+0x1d2>
 8001004:	4e57      	ldr	r6, [pc, #348]	@ (8001164 <HAL_GPIO_Init+0x1f4>)
 8001006:	42b0      	cmp	r0, r6
 8001008:	d100      	bne.n	800100c <HAL_GPIO_Init+0x9c>
 800100a:	e092      	b.n	8001132 <HAL_GPIO_Init+0x1c2>
 800100c:	4e56      	ldr	r6, [pc, #344]	@ (8001168 <HAL_GPIO_Init+0x1f8>)
 800100e:	42b0      	cmp	r0, r6
 8001010:	d100      	bne.n	8001014 <HAL_GPIO_Init+0xa4>
 8001012:	e09a      	b.n	800114a <HAL_GPIO_Init+0x1da>
 8001014:	2606      	movs	r6, #6
 8001016:	40be      	lsls	r6, r7
 8001018:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	2680      	movs	r6, #128	@ 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	6091      	str	r1, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800101e:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8001020:	4a52      	ldr	r2, [pc, #328]	@ (800116c <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	0376      	lsls	r6, r6, #13
        temp &= ~((uint32_t)iocurrent);
 8001024:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8001026:	6892      	ldr	r2, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001028:	4235      	tst	r5, r6
 800102a:	d000      	beq.n	800102e <HAL_GPIO_Init+0xbe>
 800102c:	e071      	b.n	8001112 <HAL_GPIO_Init+0x1a2>
        temp &= ~((uint32_t)iocurrent);
 800102e:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001030:	4e4e      	ldr	r6, [pc, #312]	@ (800116c <HAL_GPIO_Init+0x1fc>)
 8001032:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001034:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001036:	02af      	lsls	r7, r5, #10
 8001038:	d468      	bmi.n	800110c <HAL_GPIO_Init+0x19c>
        temp &= ~((uint32_t)iocurrent);
 800103a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800103c:	4e4b      	ldr	r6, [pc, #300]	@ (800116c <HAL_GPIO_Init+0x1fc>)
 800103e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001040:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001042:	03af      	lsls	r7, r5, #14
 8001044:	d45f      	bmi.n	8001106 <HAL_GPIO_Init+0x196>
        temp &= ~((uint32_t)iocurrent);
 8001046:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001048:	4e48      	ldr	r6, [pc, #288]	@ (800116c <HAL_GPIO_Init+0x1fc>)
 800104a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104e:	03ed      	lsls	r5, r5, #15
 8001050:	d455      	bmi.n	80010fe <HAL_GPIO_Init+0x18e>
        temp &= ~((uint32_t)iocurrent);
 8001052:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001054:	4945      	ldr	r1, [pc, #276]	@ (800116c <HAL_GPIO_Init+0x1fc>)
 8001056:	600a      	str	r2, [r1, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001058:	0022      	movs	r2, r4
      }
    }
    position++;
 800105a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800105c:	40da      	lsrs	r2, r3
 800105e:	d193      	bne.n	8000f88 <HAL_GPIO_Init+0x18>
  }
}
 8001060:	b003      	add	sp, #12
 8001062:	bcf0      	pop	{r4, r5, r6, r7}
 8001064:	46bb      	mov	fp, r7
 8001066:	46b2      	mov	sl, r6
 8001068:	46a9      	mov	r9, r5
 800106a:	46a0      	mov	r8, r4
 800106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800106e:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001070:	000e      	movs	r6, r1
 8001072:	9900      	ldr	r1, [sp, #0]
 8001074:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	4659      	mov	r1, fp
 8001078:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800107a:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107c:	000e      	movs	r6, r1
 800107e:	40be      	lsls	r6, r7
 8001080:	46b0      	mov	r8, r6
 8001082:	464e      	mov	r6, r9
 8001084:	4641      	mov	r1, r8
 8001086:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8001088:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800108a:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	000e      	movs	r6, r1
 800108e:	4661      	mov	r1, ip
 8001090:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	000e      	movs	r6, r1
 8001098:	2101      	movs	r1, #1
 800109a:	400e      	ands	r6, r1
 800109c:	409e      	lsls	r6, r3
 800109e:	46b4      	mov	ip, r6
 80010a0:	4646      	mov	r6, r8
 80010a2:	4661      	mov	r1, ip
 80010a4:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 80010a6:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80010a8:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010aa:	000e      	movs	r6, r1
 80010ac:	9900      	ldr	r1, [sp, #0]
 80010ae:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	4659      	mov	r1, fp
 80010b2:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b4:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b6:	000e      	movs	r6, r1
 80010b8:	40be      	lsls	r6, r7
 80010ba:	46b4      	mov	ip, r6
 80010bc:	4646      	mov	r6, r8
 80010be:	4661      	mov	r1, ip
 80010c0:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 80010c2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	2a02      	cmp	r2, #2
 80010c6:	d000      	beq.n	80010ca <HAL_GPIO_Init+0x15a>
 80010c8:	e775      	b.n	8000fb6 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80010ca:	08d9      	lsrs	r1, r3, #3
 80010cc:	0089      	lsls	r1, r1, #2
 80010ce:	468c      	mov	ip, r1
 80010d0:	4484      	add	ip, r0
 80010d2:	4661      	mov	r1, ip
 80010d4:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010d6:	2107      	movs	r1, #7
 80010d8:	4019      	ands	r1, r3
 80010da:	0089      	lsls	r1, r1, #2
 80010dc:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3U];
 80010de:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010e0:	210f      	movs	r1, #15
 80010e2:	4646      	mov	r6, r8
 80010e4:	40b1      	lsls	r1, r6
 80010e6:	9e01      	ldr	r6, [sp, #4]
 80010e8:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010ea:	4659      	mov	r1, fp
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010ec:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010ee:	4646      	mov	r6, r8
 80010f0:	6909      	ldr	r1, [r1, #16]
 80010f2:	40b1      	lsls	r1, r6
 80010f4:	9e01      	ldr	r6, [sp, #4]
 80010f6:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80010f8:	4661      	mov	r1, ip
 80010fa:	620e      	str	r6, [r1, #32]
 80010fc:	e75b      	b.n	8000fb6 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 80010fe:	4651      	mov	r1, sl
 8001100:	4311      	orrs	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	e7a6      	b.n	8001054 <HAL_GPIO_Init+0xe4>
          temp |= iocurrent;
 8001106:	4656      	mov	r6, sl
 8001108:	4332      	orrs	r2, r6
 800110a:	e79d      	b.n	8001048 <HAL_GPIO_Init+0xd8>
          temp |= iocurrent;
 800110c:	4656      	mov	r6, sl
 800110e:	4332      	orrs	r2, r6
 8001110:	e794      	b.n	800103c <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8001112:	4656      	mov	r6, sl
 8001114:	4332      	orrs	r2, r6
 8001116:	e78b      	b.n	8001030 <HAL_GPIO_Init+0xc0>
 8001118:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 800111a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111c:	4031      	ands	r1, r6
 800111e:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	4659      	mov	r1, fp
 8001122:	6889      	ldr	r1, [r1, #8]
 8001124:	40b9      	lsls	r1, r7
 8001126:	468c      	mov	ip, r1
 8001128:	4641      	mov	r1, r8
 800112a:	4666      	mov	r6, ip
 800112c:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 800112e:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	e741      	b.n	8000fb6 <HAL_GPIO_Init+0x46>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001132:	2603      	movs	r6, #3
 8001134:	40be      	lsls	r6, r7
 8001136:	4331      	orrs	r1, r6
 8001138:	e76f      	b.n	800101a <HAL_GPIO_Init+0xaa>
 800113a:	2601      	movs	r6, #1
 800113c:	40be      	lsls	r6, r7
 800113e:	4331      	orrs	r1, r6
 8001140:	e76b      	b.n	800101a <HAL_GPIO_Init+0xaa>
 8001142:	2602      	movs	r6, #2
 8001144:	40be      	lsls	r6, r7
 8001146:	4331      	orrs	r1, r6
 8001148:	e767      	b.n	800101a <HAL_GPIO_Init+0xaa>
 800114a:	2605      	movs	r6, #5
 800114c:	40be      	lsls	r6, r7
 800114e:	4331      	orrs	r1, r6
 8001150:	e763      	b.n	800101a <HAL_GPIO_Init+0xaa>
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	50000400 	.word	0x50000400
 8001160:	50000800 	.word	0x50000800
 8001164:	50000c00 	.word	0x50000c00
 8001168:	50001c00 	.word	0x50001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	2a00      	cmp	r2, #0
 8001172:	d001      	beq.n	8001178 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001174:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001176:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001178:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800117a:	e7fc      	b.n	8001176 <HAL_GPIO_WritePin+0x6>

0800117c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	0004      	movs	r4, r0
 8001182:	000d      	movs	r5, r1
 8001184:	0016      	movs	r6, r2
  GPIO_InitTypeDef gpio = {0};
 8001186:	2100      	movs	r1, #0
 8001188:	2214      	movs	r2, #20
 800118a:	a803      	add	r0, sp, #12
 800118c:	f001 fe54 	bl	8002e38 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	9304      	str	r3, [sp, #16]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001194:	9306      	str	r3, [sp, #24]
  gpio.Pull      = GPIO_NOPULL;
  if(RCC_MCOx == RCC_MCO1)
 8001196:	2c00      	cmp	r4, #0
 8001198:	d02a      	beq.n	80011f0 <HAL_RCC_MCOConfig+0x74>
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
  {
    gpio.Pin       = MCO3_PIN;
 800119a:	2380      	movs	r3, #128	@ 0x80
  else if (RCC_MCOx == RCC_MCO3)
 800119c:	2c02      	cmp	r4, #2
 800119e:	d018      	beq.n	80011d2 <HAL_RCC_MCOConfig+0x56>
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	9303      	str	r3, [sp, #12]
    gpio.Alternate = GPIO_AF0_MCO;

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80011a4:	2301      	movs	r3, #1
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80011a6:	20a0      	movs	r0, #160	@ 0xa0
    MCO2_CLK_ENABLE();
 80011a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <HAL_RCC_MCOConfig+0x98>)
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80011aa:	05c0      	lsls	r0, r0, #23
    MCO2_CLK_ENABLE();
 80011ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80011ae:	4319      	orrs	r1, r3
 80011b0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80011b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80011b4:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 80011b6:	4013      	ands	r3, r2
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80011bc:	f7ff fed8 	bl	8000f70 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_RCC_MCOConfig+0x98>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <HAL_RCC_MCOConfig+0x9c>)
 80011c4:	68d9      	ldr	r1, [r3, #12]
 80011c6:	4011      	ands	r1, r2
 80011c8:	4331      	orrs	r1, r6
 80011ca:	4329      	orrs	r1, r5
 80011cc:	60d9      	str	r1, [r3, #12]
}
 80011ce:	b008      	add	sp, #32
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
    gpio.Pin       = MCO3_PIN;
 80011d2:	019b      	lsls	r3, r3, #6
 80011d4:	9303      	str	r3, [sp, #12]
    MCO3_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_RCC_MCOConfig+0x98>)
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <HAL_RCC_MCOConfig+0xa0>)
    MCO3_CLK_ENABLE();
 80011da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80011dc:	a903      	add	r1, sp, #12
    MCO3_CLK_ENABLE();
 80011de:	4322      	orrs	r2, r4
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	401c      	ands	r4, r3
 80011e6:	9401      	str	r4, [sp, #4]
 80011e8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80011ea:	f7ff fec1 	bl	8000f70 <HAL_GPIO_Init>
 80011ee:	e7e7      	b.n	80011c0 <HAL_RCC_MCOConfig+0x44>
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80011f0:	20a0      	movs	r0, #160	@ 0xa0
    MCO1_CLK_ENABLE();
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_RCC_MCOConfig+0x98>)
    gpio.Pin       = MCO1_PIN;
 80011f4:	33fe      	adds	r3, #254	@ 0xfe
 80011f6:	9303      	str	r3, [sp, #12]
    MCO1_CLK_ENABLE();
 80011f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80011fa:	3bff      	subs	r3, #255	@ 0xff
 80011fc:	4319      	orrs	r1, r3
 80011fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001202:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8001204:	4013      	ands	r3, r2
 8001206:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001208:	05c0      	lsls	r0, r0, #23
    MCO1_CLK_ENABLE();
 800120a:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800120c:	f7ff feb0 	bl	8000f70 <HAL_GPIO_Init>
 8001210:	e7d6      	b.n	80011c0 <HAL_RCC_MCOConfig+0x44>
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	40021000 	.word	0x40021000
 8001218:	80ffffff 	.word	0x80ffffff
 800121c:	50000400 	.word	0x50000400

08001220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001222:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001224:	4c29      	ldr	r4, [pc, #164]	@ (80012cc <HAL_RCC_GetSysClockFreq+0xac>)
 8001226:	68e2      	ldr	r2, [r4, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001228:	4013      	ands	r3, r2
 800122a:	2b08      	cmp	r3, #8
 800122c:	d00b      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x26>
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d017      	beq.n	8001262 <HAL_RCC_GetSysClockFreq+0x42>
 8001232:	2b04      	cmp	r3, #4
 8001234:	d009      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001236:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001238:	6863      	ldr	r3, [r4, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800123a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001240:	3301      	adds	r3, #1
 8001242:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8001246:	4822      	ldr	r0, [pc, #136]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001248:	e7fc      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800124a:	2010      	movs	r0, #16
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 8001250:	4243      	negs	r3, r0
 8001252:	4158      	adcs	r0, r3
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001256:	4240      	negs	r0, r0
 8001258:	4018      	ands	r0, r3
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800125c:	469c      	mov	ip, r3
 800125e:	4460      	add	r0, ip
 8001260:	e7f0      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001262:	0293      	lsls	r3, r2, #10
 8001264:	4d1d      	ldr	r5, [pc, #116]	@ (80012dc <HAL_RCC_GetSysClockFreq+0xbc>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001266:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001268:	68e7      	ldr	r7, [r4, #12]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800126a:	0f1b      	lsrs	r3, r3, #28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800126c:	0f96      	lsrs	r6, r2, #30
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800126e:	2100      	movs	r1, #0
 8001270:	5ce8      	ldrb	r0, [r5, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001272:	3601      	adds	r6, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001274:	03ff      	lsls	r7, r7, #15
 8001276:	d40b      	bmi.n	8001290 <HAL_RCC_GetSysClockFreq+0x70>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	06db      	lsls	r3, r3, #27
 800127c:	d524      	bpl.n	80012c8 <HAL_RCC_GetSysClockFreq+0xa8>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800127e:	4a16      	ldr	r2, [pc, #88]	@ (80012d8 <HAL_RCC_GetSysClockFreq+0xb8>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001280:	2300      	movs	r3, #0
 8001282:	f7fe ffff 	bl	8000284 <__aeabi_lmul>
 8001286:	0032      	movs	r2, r6
 8001288:	2300      	movs	r3, #0
 800128a:	f7fe ffdb 	bl	8000244 <__aeabi_uldivmod>
 800128e:	e7d9      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001290:	0ec5      	lsrs	r5, r0, #27
 8001292:	0144      	lsls	r4, r0, #5
 8001294:	1a24      	subs	r4, r4, r0
 8001296:	418d      	sbcs	r5, r1
 8001298:	0ea7      	lsrs	r7, r4, #26
 800129a:	01ab      	lsls	r3, r5, #6
 800129c:	433b      	orrs	r3, r7
 800129e:	01a2      	lsls	r2, r4, #6
 80012a0:	1b12      	subs	r2, r2, r4
 80012a2:	41ab      	sbcs	r3, r5
 80012a4:	0014      	movs	r4, r2
 80012a6:	0f57      	lsrs	r7, r2, #29
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	433b      	orrs	r3, r7
 80012ac:	00e2      	lsls	r2, r4, #3
 80012ae:	1880      	adds	r0, r0, r2
 80012b0:	4159      	adcs	r1, r3
 80012b2:	02cb      	lsls	r3, r1, #11
 80012b4:	0d42      	lsrs	r2, r0, #21
 80012b6:	431a      	orrs	r2, r3
 80012b8:	02c4      	lsls	r4, r0, #11
 80012ba:	0020      	movs	r0, r4
 80012bc:	0011      	movs	r1, r2
 80012be:	2300      	movs	r3, #0
 80012c0:	0032      	movs	r2, r6
 80012c2:	f7fe ffbf 	bl	8000244 <__aeabi_uldivmod>
 80012c6:	e7bd      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x24>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012ca:	e7d9      	b.n	8001280 <HAL_RCC_GetSysClockFreq+0x60>
 80012cc:	40021000 	.word	0x40021000
 80012d0:	01e84800 	.word	0x01e84800
 80012d4:	00b71b00 	.word	0x00b71b00
 80012d8:	003d0900 	.word	0x003d0900
 80012dc:	08003754 	.word	0x08003754
 80012e0:	00f42400 	.word	0x00f42400

080012e4 <HAL_RCC_OscConfig>:
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	46d6      	mov	lr, sl
 80012e8:	464f      	mov	r7, r9
 80012ea:	4646      	mov	r6, r8
 80012ec:	b5c0      	push	{r6, r7, lr}
 80012ee:	0004      	movs	r4, r0
 80012f0:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x14>
 80012f6:	e152      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f8:	4bcc      	ldr	r3, [pc, #816]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80012fa:	250c      	movs	r5, #12
 80012fc:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012fe:	68de      	ldr	r6, [r3, #12]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001308:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	07da      	lsls	r2, r3, #31
 800130c:	d533      	bpl.n	8001376 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130e:	2d08      	cmp	r5, #8
 8001310:	d100      	bne.n	8001314 <HAL_RCC_OscConfig+0x30>
 8001312:	e13b      	b.n	800158c <HAL_RCC_OscConfig+0x2a8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001314:	2d0c      	cmp	r5, #12
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x36>
 8001318:	e135      	b.n	8001586 <HAL_RCC_OscConfig+0x2a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	2280      	movs	r2, #128	@ 0x80
 800131c:	6863      	ldr	r3, [r4, #4]
 800131e:	0252      	lsls	r2, r2, #9
 8001320:	4293      	cmp	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x42>
 8001324:	e13d      	b.n	80015a2 <HAL_RCC_OscConfig+0x2be>
 8001326:	21a0      	movs	r1, #160	@ 0xa0
 8001328:	02c9      	lsls	r1, r1, #11
 800132a:	428b      	cmp	r3, r1
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x4c>
 800132e:	e205      	b.n	800173c <HAL_RCC_OscConfig+0x458>
 8001330:	4fbe      	ldr	r7, [pc, #760]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 8001332:	48bf      	ldr	r0, [pc, #764]	@ (8001630 <HAL_RCC_OscConfig+0x34c>)
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	4001      	ands	r1, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	9201      	str	r2, [sp, #4]
 8001340:	9a01      	ldr	r2, [sp, #4]
 8001342:	49bc      	ldr	r1, [pc, #752]	@ (8001634 <HAL_RCC_OscConfig+0x350>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134a:	2b00      	cmp	r3, #0
 800134c:	d000      	beq.n	8001350 <HAL_RCC_OscConfig+0x6c>
 800134e:	e12c      	b.n	80015aa <HAL_RCC_OscConfig+0x2c6>
        tickstart = HAL_GetTick();
 8001350:	f7ff fd62 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8001358:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800135a:	4699      	mov	r9, r3
 800135c:	e006      	b.n	800136c <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135e:	f7ff fd5b 	bl	8000e18 <HAL_GetTick>
 8001362:	4643      	mov	r3, r8
 8001364:	1ac0      	subs	r0, r0, r3
 8001366:	2864      	cmp	r0, #100	@ 0x64
 8001368:	d900      	bls.n	800136c <HAL_RCC_OscConfig+0x88>
 800136a:	e1a5      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800136c:	464a      	mov	r2, r9
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	4213      	tst	r3, r2
 8001372:	d1f4      	bne.n	800135e <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	079a      	lsls	r2, r3, #30
 8001378:	d527      	bpl.n	80013ca <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 800137a:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137c:	2d04      	cmp	r5, #4
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x9e>
 8001380:	e12b      	b.n	80015da <HAL_RCC_OscConfig+0x2f6>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001382:	2d0c      	cmp	r5, #12
 8001384:	d100      	bne.n	8001388 <HAL_RCC_OscConfig+0xa4>
 8001386:	e125      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001388:	4ea8      	ldr	r6, [pc, #672]	@ (800162c <HAL_RCC_OscConfig+0x348>)
      if(hsi_state != RCC_HSI_OFF)
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <HAL_RCC_OscConfig+0xac>
 800138e:	e1aa      	b.n	80016e6 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001390:	2109      	movs	r1, #9
 8001392:	6832      	ldr	r2, [r6, #0]
 8001394:	438a      	bics	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800139a:	f7ff fd3d 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80013a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a2:	4698      	mov	r8, r3
 80013a4:	e005      	b.n	80013b2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fd37 	bl	8000e18 <HAL_GetTick>
 80013aa:	1bc0      	subs	r0, r0, r7
 80013ac:	2802      	cmp	r0, #2
 80013ae:	d900      	bls.n	80013b2 <HAL_RCC_OscConfig+0xce>
 80013b0:	e182      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013b2:	4642      	mov	r2, r8
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	421a      	tst	r2, r3
 80013b8:	d0f5      	beq.n	80013a6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	6872      	ldr	r2, [r6, #4]
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	499e      	ldr	r1, [pc, #632]	@ (8001638 <HAL_RCC_OscConfig+0x354>)
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	400a      	ands	r2, r1
 80013c4:	4313      	orrs	r3, r2
 80013c6:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	06da      	lsls	r2, r3, #27
 80013cc:	d52b      	bpl.n	8001426 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ce:	2d00      	cmp	r5, #0
 80013d0:	d100      	bne.n	80013d4 <HAL_RCC_OscConfig+0xf0>
 80013d2:	e0ad      	b.n	8001530 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d4:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80013d6:	4e95      	ldr	r6, [pc, #596]	@ (800162c <HAL_RCC_OscConfig+0x348>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0xfa>
 80013dc:	e198      	b.n	8001710 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_MSI_ENABLE();
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	6832      	ldr	r2, [r6, #0]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4313      	orrs	r3, r2
 80013e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013e8:	f7ff fd16 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80013f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f2:	4698      	mov	r8, r3
 80013f4:	e005      	b.n	8001402 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f6:	f7ff fd0f 	bl	8000e18 <HAL_GetTick>
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d900      	bls.n	8001402 <HAL_RCC_OscConfig+0x11e>
 8001400:	e15a      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001402:	4642      	mov	r2, r8
 8001404:	6833      	ldr	r3, [r6, #0]
 8001406:	4213      	tst	r3, r2
 8001408:	d0f5      	beq.n	80013f6 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140a:	6873      	ldr	r3, [r6, #4]
 800140c:	4a8b      	ldr	r2, [pc, #556]	@ (800163c <HAL_RCC_OscConfig+0x358>)
 800140e:	4013      	ands	r3, r2
 8001410:	6a22      	ldr	r2, [r4, #32]
 8001412:	4313      	orrs	r3, r2
 8001414:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001416:	6872      	ldr	r2, [r6, #4]
 8001418:	69e3      	ldr	r3, [r4, #28]
 800141a:	0212      	lsls	r2, r2, #8
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	0a12      	lsrs	r2, r2, #8
 8001420:	4313      	orrs	r3, r2
 8001422:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	071a      	lsls	r2, r3, #28
 8001428:	d519      	bpl.n	800145e <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800142c:	4e7f      	ldr	r6, [pc, #508]	@ (800162c <HAL_RCC_OscConfig+0x348>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142e:	2b00      	cmp	r3, #0
 8001430:	d100      	bne.n	8001434 <HAL_RCC_OscConfig+0x150>
 8001432:	e143      	b.n	80016bc <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_LSI_ENABLE();
 8001434:	2201      	movs	r2, #1
 8001436:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001438:	4313      	orrs	r3, r2
 800143a:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800143c:	f7ff fcec 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001440:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001442:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001444:	4698      	mov	r8, r3
 8001446:	e005      	b.n	8001454 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fce6 	bl	8000e18 <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	2802      	cmp	r0, #2
 8001450:	d900      	bls.n	8001454 <HAL_RCC_OscConfig+0x170>
 8001452:	e131      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001454:	4642      	mov	r2, r8
 8001456:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001458:	421a      	tst	r2, r3
 800145a:	d0f5      	beq.n	8001448 <HAL_RCC_OscConfig+0x164>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	075b      	lsls	r3, r3, #29
 8001460:	d542      	bpl.n	80014e8 <HAL_RCC_OscConfig+0x204>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001464:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4a71      	ldr	r2, [pc, #452]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 8001468:	055b      	lsls	r3, r3, #21
 800146a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    FlagStatus       pwrclkchanged = RESET;
 800146c:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4219      	tst	r1, r3
 8001470:	d104      	bne.n	800147c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001474:	430b      	orrs	r3, r1
 8001476:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8001478:	2301      	movs	r3, #1
 800147a:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	2780      	movs	r7, #128	@ 0x80
 800147e:	4e70      	ldr	r6, [pc, #448]	@ (8001640 <HAL_RCC_OscConfig+0x35c>)
 8001480:	007f      	lsls	r7, r7, #1
 8001482:	6833      	ldr	r3, [r6, #0]
 8001484:	423b      	tst	r3, r7
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x1a6>
 8001488:	e106      	b.n	8001698 <HAL_RCC_OscConfig+0x3b4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	68a3      	ldr	r3, [r4, #8]
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	4293      	cmp	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x1b2>
 8001494:	e194      	b.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x1b8>
 800149a:	e0e1      	b.n	8001660 <HAL_RCC_OscConfig+0x37c>
 800149c:	21a0      	movs	r1, #160	@ 0xa0
 800149e:	00c9      	lsls	r1, r1, #3
 80014a0:	428b      	cmp	r3, r1
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1c2>
 80014a4:	e1ad      	b.n	8001802 <HAL_RCC_OscConfig+0x51e>
 80014a6:	4b61      	ldr	r3, [pc, #388]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80014a8:	4966      	ldr	r1, [pc, #408]	@ (8001644 <HAL_RCC_OscConfig+0x360>)
 80014aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ac:	400a      	ands	r2, r1
 80014ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80014b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014b2:	4965      	ldr	r1, [pc, #404]	@ (8001648 <HAL_RCC_OscConfig+0x364>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	651a      	str	r2, [r3, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80014b8:	f7ff fcae 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014bc:	2780      	movs	r7, #128	@ 0x80
 80014be:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <HAL_RCC_OscConfig+0x348>)
      tickstart = HAL_GetTick();
 80014c0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	4b61      	ldr	r3, [pc, #388]	@ (800164c <HAL_RCC_OscConfig+0x368>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c6:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ca:	e005      	b.n	80014d8 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff fca4 	bl	8000e18 <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	4548      	cmp	r0, r9
 80014d4:	d900      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1f4>
 80014d6:	e0ef      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014d8:	4643      	mov	r3, r8
 80014da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014dc:	423b      	tst	r3, r7
 80014de:	d0f5      	beq.n	80014cc <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 80014e0:	4653      	mov	r3, sl
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x204>
 80014e6:	e165      	b.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d019      	beq.n	8001522 <HAL_RCC_OscConfig+0x23e>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ee:	2d0c      	cmp	r5, #12
 80014f0:	d100      	bne.n	80014f4 <HAL_RCC_OscConfig+0x210>
 80014f2:	e16a      	b.n	80017ca <HAL_RCC_OscConfig+0x4e6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d100      	bne.n	80014fa <HAL_RCC_OscConfig+0x216>
 80014f8:	e12a      	b.n	8001750 <HAL_RCC_OscConfig+0x46c>
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4c4c      	ldr	r4, [pc, #304]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80014fc:	4a54      	ldr	r2, [pc, #336]	@ (8001650 <HAL_RCC_OscConfig+0x36c>)
 80014fe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001500:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001502:	4013      	ands	r3, r2
 8001504:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001506:	f7ff fc87 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800150a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800150c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800150e:	e005      	b.n	800151c <HAL_RCC_OscConfig+0x238>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fc82 	bl	8000e18 <HAL_GetTick>
 8001514:	1b40      	subs	r0, r0, r5
 8001516:	2802      	cmp	r0, #2
 8001518:	d900      	bls.n	800151c <HAL_RCC_OscConfig+0x238>
 800151a:	e0cd      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	4233      	tst	r3, r6
 8001520:	d1f6      	bne.n	8001510 <HAL_RCC_OscConfig+0x22c>
  return HAL_OK;
 8001522:	2000      	movs	r0, #0
}
 8001524:	b002      	add	sp, #8
 8001526:	bce0      	pop	{r5, r6, r7}
 8001528:	46ba      	mov	sl, r7
 800152a:	46b1      	mov	r9, r6
 800152c:	46a8      	mov	r8, r5
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001530:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	059b      	lsls	r3, r3, #22
 8001536:	d502      	bpl.n	800153e <HAL_RCC_OscConfig+0x25a>
 8001538:	69a3      	ldr	r3, [r4, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d02f      	beq.n	800159e <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4a3b      	ldr	r2, [pc, #236]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 8001540:	483e      	ldr	r0, [pc, #248]	@ (800163c <HAL_RCC_OscConfig+0x358>)
 8001542:	6851      	ldr	r1, [r2, #4]
 8001544:	6a23      	ldr	r3, [r4, #32]
 8001546:	4001      	ands	r1, r0
 8001548:	4319      	orrs	r1, r3
 800154a:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	6850      	ldr	r0, [r2, #4]
 800154e:	69e1      	ldr	r1, [r4, #28]
 8001550:	0200      	lsls	r0, r0, #8
 8001552:	0a00      	lsrs	r0, r0, #8
 8001554:	0609      	lsls	r1, r1, #24
 8001556:	4301      	orrs	r1, r0
 8001558:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800155a:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	0b5b      	lsrs	r3, r3, #13
 8001560:	3301      	adds	r3, #1
 8001562:	0212      	lsls	r2, r2, #8
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001568:	483a      	ldr	r0, [pc, #232]	@ (8001654 <HAL_RCC_OscConfig+0x370>)
 800156a:	060a      	lsls	r2, r1, #24
 800156c:	0f12      	lsrs	r2, r2, #28
 800156e:	5c82      	ldrb	r2, [r0, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001570:	4e39      	ldr	r6, [pc, #228]	@ (8001658 <HAL_RCC_OscConfig+0x374>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001572:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001574:	6033      	str	r3, [r6, #0]
        status = HAL_InitTick (uwTickPrio);
 8001576:	4b39      	ldr	r3, [pc, #228]	@ (800165c <HAL_RCC_OscConfig+0x378>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f7ff fc07 	bl	8000d8c <HAL_InitTick>
        if(status != HAL_OK)
 800157e:	2800      	cmp	r0, #0
 8001580:	d1d0      	bne.n	8001524 <HAL_RCC_OscConfig+0x240>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	e74f      	b.n	8001426 <HAL_RCC_OscConfig+0x142>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001586:	2e00      	cmp	r6, #0
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x2a8>
 800158a:	e6c6      	b.n	800131a <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4a27      	ldr	r2, [pc, #156]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	0392      	lsls	r2, r2, #14
 8001592:	d400      	bmi.n	8001596 <HAL_RCC_OscConfig+0x2b2>
 8001594:	e6ef      	b.n	8001376 <HAL_RCC_OscConfig+0x92>
 8001596:	6862      	ldr	r2, [r4, #4]
 8001598:	2a00      	cmp	r2, #0
 800159a:	d000      	beq.n	800159e <HAL_RCC_OscConfig+0x2ba>
 800159c:	e6eb      	b.n	8001376 <HAL_RCC_OscConfig+0x92>
    return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7c0      	b.n	8001524 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a2:	4922      	ldr	r1, [pc, #136]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80015a4:	680a      	ldr	r2, [r1, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc35 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_RCC_OscConfig+0x348>)
        tickstart = HAL_GetTick();
 80015b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b2:	4699      	mov	r9, r3
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4698      	mov	r8, r3
 80015ba:	e004      	b.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fc2c 	bl	8000e18 <HAL_GetTick>
 80015c0:	1bc0      	subs	r0, r0, r7
 80015c2:	2864      	cmp	r0, #100	@ 0x64
 80015c4:	d878      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c6:	464b      	mov	r3, r9
 80015c8:	4642      	mov	r2, r8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4213      	tst	r3, r2
 80015ce:	d0f5      	beq.n	80015bc <HAL_RCC_OscConfig+0x2d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	e6d0      	b.n	8001376 <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d4:	2e00      	cmp	r6, #0
 80015d6:	d000      	beq.n	80015da <HAL_RCC_OscConfig+0x2f6>
 80015d8:	e6d6      	b.n	8001388 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015da:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	0752      	lsls	r2, r2, #29
 80015e0:	d501      	bpl.n	80015e6 <HAL_RCC_OscConfig+0x302>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0db      	beq.n	800159e <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4e11      	ldr	r6, [pc, #68]	@ (800162c <HAL_RCC_OscConfig+0x348>)
 80015e8:	6922      	ldr	r2, [r4, #16]
 80015ea:	6871      	ldr	r1, [r6, #4]
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_RCC_OscConfig+0x354>)
 80015ee:	0212      	lsls	r2, r2, #8
 80015f0:	4001      	ands	r1, r0
 80015f2:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015f4:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015f8:	6832      	ldr	r2, [r6, #0]
 80015fa:	438a      	bics	r2, r1
 80015fc:	4313      	orrs	r3, r2
 80015fe:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001600:	f7ff fe0e 	bl	8001220 <HAL_RCC_GetSysClockFreq>
 8001604:	68f3      	ldr	r3, [r6, #12]
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_RCC_OscConfig+0x370>)
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	0f1b      	lsrs	r3, r3, #28
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	4912      	ldr	r1, [pc, #72]	@ (8001658 <HAL_RCC_OscConfig+0x374>)
 8001610:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_RCC_OscConfig+0x378>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001614:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f7ff fbb8 	bl	8000d8c <HAL_InitTick>
      if(status != HAL_OK)
 800161c:	2800      	cmp	r0, #0
 800161e:	d000      	beq.n	8001622 <HAL_RCC_OscConfig+0x33e>
 8001620:	e780      	b.n	8001524 <HAL_RCC_OscConfig+0x240>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	06da      	lsls	r2, r3, #27
 8001626:	d400      	bmi.n	800162a <HAL_RCC_OscConfig+0x346>
 8001628:	e6fd      	b.n	8001426 <HAL_RCC_OscConfig+0x142>
 800162a:	e6d0      	b.n	80013ce <HAL_RCC_OscConfig+0xea>
 800162c:	40021000 	.word	0x40021000
 8001630:	fffeffff 	.word	0xfffeffff
 8001634:	fffbffff 	.word	0xfffbffff
 8001638:	ffffe0ff 	.word	0xffffe0ff
 800163c:	ffff1fff 	.word	0xffff1fff
 8001640:	40007000 	.word	0x40007000
 8001644:	fffffeff 	.word	0xfffffeff
 8001648:	fffffbff 	.word	0xfffffbff
 800164c:	00001388 	.word	0x00001388
 8001650:	feffffff 	.word	0xfeffffff
 8001654:	08003768 	.word	0x08003768
 8001658:	20000004 	.word	0x20000004
 800165c:	2000000c 	.word	0x2000000c
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	4e6d      	ldr	r6, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 8001662:	4a6e      	ldr	r2, [pc, #440]	@ (800181c <HAL_RCC_OscConfig+0x538>)
 8001664:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001666:	4013      	ands	r3, r2
 8001668:	6533      	str	r3, [r6, #80]	@ 0x50
 800166a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800166c:	4a6c      	ldr	r2, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0x53c>)
 800166e:	4013      	ands	r3, r2
 8001670:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001672:	f7ff fbd1 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	4b69      	ldr	r3, [pc, #420]	@ (8001824 <HAL_RCC_OscConfig+0x540>)
      tickstart = HAL_GetTick();
 800167e:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001682:	e004      	b.n	800168e <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f7ff fbc8 	bl	8000e18 <HAL_GetTick>
 8001688:	1bc0      	subs	r0, r0, r7
 800168a:	4548      	cmp	r0, r9
 800168c:	d814      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800168e:	4642      	mov	r2, r8
 8001690:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001692:	4213      	tst	r3, r2
 8001694:	d1f6      	bne.n	8001684 <HAL_RCC_OscConfig+0x3a0>
 8001696:	e723      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001698:	6833      	ldr	r3, [r6, #0]
 800169a:	433b      	orrs	r3, r7
 800169c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800169e:	f7ff fbbb 	bl	8000e18 <HAL_GetTick>
 80016a2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	6833      	ldr	r3, [r6, #0]
 80016a6:	423b      	tst	r3, r7
 80016a8:	d000      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c8>
 80016aa:	e6ee      	b.n	800148a <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ac:	f7ff fbb4 	bl	8000e18 <HAL_GetTick>
 80016b0:	4643      	mov	r3, r8
 80016b2:	1ac0      	subs	r0, r0, r3
 80016b4:	2864      	cmp	r0, #100	@ 0x64
 80016b6:	d9f5      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 80016b8:	2003      	movs	r0, #3
 80016ba:	e733      	b.n	8001524 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_LSI_DISABLE();
 80016bc:	2201      	movs	r2, #1
 80016be:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80016c0:	4393      	bics	r3, r2
 80016c2:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80016c4:	f7ff fba8 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016c8:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80016ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016cc:	4698      	mov	r8, r3
 80016ce:	e004      	b.n	80016da <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fba2 	bl	8000e18 <HAL_GetTick>
 80016d4:	1bc0      	subs	r0, r0, r7
 80016d6:	2802      	cmp	r0, #2
 80016d8:	d8ee      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016da:	4642      	mov	r2, r8
 80016dc:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80016de:	421a      	tst	r2, r3
 80016e0:	d1f6      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	e6bb      	b.n	800145e <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 80016e6:	2201      	movs	r2, #1
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	4393      	bics	r3, r2
 80016ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb93 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f2:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80016f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f6:	4698      	mov	r8, r3
 80016f8:	e004      	b.n	8001704 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fb8d 	bl	8000e18 <HAL_GetTick>
 80016fe:	1bc0      	subs	r0, r0, r7
 8001700:	2802      	cmp	r0, #2
 8001702:	d8d9      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001704:	4642      	mov	r2, r8
 8001706:	6833      	ldr	r3, [r6, #0]
 8001708:	421a      	tst	r2, r3
 800170a:	d1f6      	bne.n	80016fa <HAL_RCC_OscConfig+0x416>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	e789      	b.n	8001624 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_MSI_DISABLE();
 8001710:	6833      	ldr	r3, [r6, #0]
 8001712:	4a42      	ldr	r2, [pc, #264]	@ (800181c <HAL_RCC_OscConfig+0x538>)
 8001714:	4013      	ands	r3, r2
 8001716:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001718:	f7ff fb7e 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8001720:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001722:	4698      	mov	r8, r3
 8001724:	e004      	b.n	8001730 <HAL_RCC_OscConfig+0x44c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fb77 	bl	8000e18 <HAL_GetTick>
 800172a:	1bc0      	subs	r0, r0, r7
 800172c:	2802      	cmp	r0, #2
 800172e:	d8c3      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001730:	4642      	mov	r2, r8
 8001732:	6833      	ldr	r3, [r6, #0]
 8001734:	4213      	tst	r3, r2
 8001736:	d1f6      	bne.n	8001726 <HAL_RCC_OscConfig+0x442>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	e674      	b.n	8001426 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 8001740:	02c9      	lsls	r1, r1, #11
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	4301      	orrs	r1, r0
 8001746:	6019      	str	r1, [r3, #0]
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174e:	e72c      	b.n	80015aa <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001750:	4d31      	ldr	r5, [pc, #196]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 8001752:	4a35      	ldr	r2, [pc, #212]	@ (8001828 <HAL_RCC_OscConfig+0x544>)
 8001754:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001756:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001758:	4013      	ands	r3, r2
 800175a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800175c:	f7ff fb5c 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001760:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001762:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001764:	e004      	b.n	8001770 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fb57 	bl	8000e18 <HAL_GetTick>
 800176a:	1b80      	subs	r0, r0, r6
 800176c:	2802      	cmp	r0, #2
 800176e:	d8a3      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	423b      	tst	r3, r7
 8001774:	d1f7      	bne.n	8001766 <HAL_RCC_OscConfig+0x482>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001776:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001778:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800177a:	68ea      	ldr	r2, [r5, #12]
 800177c:	430b      	orrs	r3, r1
 800177e:	492b      	ldr	r1, [pc, #172]	@ (800182c <HAL_RCC_OscConfig+0x548>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001780:	4e25      	ldr	r6, [pc, #148]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001782:	400a      	ands	r2, r1
 8001784:	4313      	orrs	r3, r2
 8001786:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001788:	4313      	orrs	r3, r2
 800178a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	682a      	ldr	r2, [r5, #0]
 8001790:	045b      	lsls	r3, r3, #17
 8001792:	4313      	orrs	r3, r2
 8001794:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001796:	f7ff fb3f 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800179a:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 800179c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800179e:	04ad      	lsls	r5, r5, #18
 80017a0:	e004      	b.n	80017ac <HAL_RCC_OscConfig+0x4c8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff fb39 	bl	8000e18 <HAL_GetTick>
 80017a6:	1b00      	subs	r0, r0, r4
 80017a8:	2802      	cmp	r0, #2
 80017aa:	d885      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017ac:	6833      	ldr	r3, [r6, #0]
 80017ae:	422b      	tst	r3, r5
 80017b0:	d0f7      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4be>
 80017b2:	e6b6      	b.n	8001522 <HAL_RCC_OscConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 80017b6:	491e      	ldr	r1, [pc, #120]	@ (8001830 <HAL_RCC_OscConfig+0x54c>)
 80017b8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80017ba:	400b      	ands	r3, r1
 80017bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80017be:	e693      	b.n	80014e8 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	4a15      	ldr	r2, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 80017c2:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	e676      	b.n	80014b8 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
 80017ce:	e6e6      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d0:	2280      	movs	r2, #128	@ 0x80
        pll_config = RCC->CFGR;
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        pll_config = RCC->CFGR;
 80017d6:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	0252      	lsls	r2, r2, #9
 80017da:	401a      	ands	r2, r3
 80017dc:	428a      	cmp	r2, r1
 80017de:	d000      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4fe>
 80017e0:	e6dd      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017e2:	22f0      	movs	r2, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017e6:	0392      	lsls	r2, r2, #14
 80017e8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	428a      	cmp	r2, r1
 80017ec:	d000      	beq.n	80017f0 <HAL_RCC_OscConfig+0x50c>
 80017ee:	e6d6      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017f0:	22c0      	movs	r2, #192	@ 0xc0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017f2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017f8:	1a18      	subs	r0, r3, r0
 80017fa:	1e43      	subs	r3, r0, #1
 80017fc:	4198      	sbcs	r0, r3
 80017fe:	b2c0      	uxtb	r0, r0
 8001800:	e690      	b.n	8001524 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_OscConfig+0x534>)
 8001804:	3901      	subs	r1, #1
 8001806:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001808:	39ff      	subs	r1, #255	@ 0xff
 800180a:	4301      	orrs	r1, r0
 800180c:	6519      	str	r1, [r3, #80]	@ 0x50
 800180e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001810:	430a      	orrs	r2, r1
 8001812:	651a      	str	r2, [r3, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	e650      	b.n	80014b8 <HAL_RCC_OscConfig+0x1d4>
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	fffffeff 	.word	0xfffffeff
 8001820:	fffffbff 	.word	0xfffffbff
 8001824:	00001388 	.word	0x00001388
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	ff02ffff 	.word	0xff02ffff
 8001830:	efffffff 	.word	0xefffffff

08001834 <HAL_RCC_ClockConfig>:
{
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	46ce      	mov	lr, r9
 8001838:	4647      	mov	r7, r8
 800183a:	0005      	movs	r5, r0
 800183c:	000c      	movs	r4, r1
 800183e:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8001840:	2800      	cmp	r0, #0
 8001842:	d066      	beq.n	8001912 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	2201      	movs	r2, #1
 8001846:	4e6a      	ldr	r6, [pc, #424]	@ (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	6833      	ldr	r3, [r6, #0]
 800184a:	4013      	ands	r3, r2
 800184c:	428b      	cmp	r3, r1
 800184e:	d362      	bcc.n	8001916 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	079a      	lsls	r2, r3, #30
 8001854:	d506      	bpl.n	8001864 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001856:	20f0      	movs	r0, #240	@ 0xf0
 8001858:	4966      	ldr	r1, [pc, #408]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 800185a:	68ca      	ldr	r2, [r1, #12]
 800185c:	4382      	bics	r2, r0
 800185e:	68a8      	ldr	r0, [r5, #8]
 8001860:	4302      	orrs	r2, r0
 8001862:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001864:	07db      	lsls	r3, r3, #31
 8001866:	d52d      	bpl.n	80018c4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001868:	4b62      	ldr	r3, [pc, #392]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	2a02      	cmp	r2, #2
 8001870:	d04d      	beq.n	800190e <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	2a03      	cmp	r2, #3
 8001874:	d100      	bne.n	8001878 <HAL_RCC_ClockConfig+0x44>
 8001876:	e06f      	b.n	8001958 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001878:	2a01      	cmp	r2, #1
 800187a:	d100      	bne.n	800187e <HAL_RCC_ClockConfig+0x4a>
 800187c:	e0a3      	b.n	80019c6 <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800187e:	059b      	lsls	r3, r3, #22
 8001880:	d547      	bpl.n	8001912 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	2103      	movs	r1, #3
 8001884:	4e5b      	ldr	r6, [pc, #364]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001886:	68f3      	ldr	r3, [r6, #12]
 8001888:	438b      	bics	r3, r1
 800188a:	4313      	orrs	r3, r2
 800188c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800188e:	f7ff fac3 	bl	8000e18 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001892:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001894:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	2b02      	cmp	r3, #2
 8001898:	d100      	bne.n	800189c <HAL_RCC_ClockConfig+0x68>
 800189a:	e074      	b.n	8001986 <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189c:	2b03      	cmp	r3, #3
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x6e>
 80018a0:	e081      	b.n	80019a6 <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d100      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x74>
 80018a6:	e093      	b.n	80019d0 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018a8:	230c      	movs	r3, #12
 80018aa:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4699      	mov	r9, r3
 80018b0:	e004      	b.n	80018bc <HAL_RCC_ClockConfig+0x88>
 80018b2:	f7ff fab1 	bl	8000e18 <HAL_GetTick>
 80018b6:	1bc0      	subs	r0, r0, r7
 80018b8:	4548      	cmp	r0, r9
 80018ba:	d842      	bhi.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018bc:	4642      	mov	r2, r8
 80018be:	68f3      	ldr	r3, [r6, #12]
 80018c0:	421a      	tst	r2, r3
 80018c2:	d1f6      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	2201      	movs	r2, #1
 80018c6:	4e4a      	ldr	r6, [pc, #296]	@ (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	4013      	ands	r3, r2
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	d847      	bhi.n	8001960 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	075a      	lsls	r2, r3, #29
 80018d4:	d506      	bpl.n	80018e4 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d6:	4947      	ldr	r1, [pc, #284]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	4848      	ldr	r0, [pc, #288]	@ (80019fc <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	68ca      	ldr	r2, [r1, #12]
 80018dc:	4002      	ands	r2, r0
 80018de:	68e8      	ldr	r0, [r5, #12]
 80018e0:	4302      	orrs	r2, r0
 80018e2:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	071b      	lsls	r3, r3, #28
 80018e6:	d42e      	bmi.n	8001946 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e8:	f7ff fc9a 	bl	8001220 <HAL_RCC_GetSysClockFreq>
 80018ec:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	4a44      	ldr	r2, [pc, #272]	@ (8001a00 <HAL_RCC_ClockConfig+0x1cc>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4944      	ldr	r1, [pc, #272]	@ (8001a04 <HAL_RCC_ClockConfig+0x1d0>)
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	0f1b      	lsrs	r3, r3, #28
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80018fc:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f7ff fa43 	bl	8000d8c <HAL_InitTick>
}
 8001906:	bcc0      	pop	{r6, r7}
 8001908:	46b9      	mov	r9, r7
 800190a:	46b0      	mov	r8, r6
 800190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190e:	039b      	lsls	r3, r3, #14
 8001910:	d4b7      	bmi.n	8001882 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
 8001914:	e7f7      	b.n	8001906 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	6833      	ldr	r3, [r6, #0]
 8001918:	4393      	bics	r3, r2
 800191a:	430b      	orrs	r3, r1
 800191c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800191e:	f7ff fa7b 	bl	8000e18 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	2301      	movs	r3, #1
 8001924:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8001928:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192c:	4642      	mov	r2, r8
 800192e:	6833      	ldr	r3, [r6, #0]
 8001930:	4013      	ands	r3, r2
 8001932:	42a3      	cmp	r3, r4
 8001934:	d100      	bne.n	8001938 <HAL_RCC_ClockConfig+0x104>
 8001936:	e78b      	b.n	8001850 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff fa6e 	bl	8000e18 <HAL_GetTick>
 800193c:	1bc0      	subs	r0, r0, r7
 800193e:	4548      	cmp	r0, r9
 8001940:	d9f4      	bls.n	800192c <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8001942:	2003      	movs	r0, #3
 8001944:	e7df      	b.n	8001906 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001946:	492b      	ldr	r1, [pc, #172]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	692b      	ldr	r3, [r5, #16]
 800194a:	68ca      	ldr	r2, [r1, #12]
 800194c:	482f      	ldr	r0, [pc, #188]	@ (8001a0c <HAL_RCC_ClockConfig+0x1d8>)
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4002      	ands	r2, r0
 8001952:	4313      	orrs	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]
 8001956:	e7c7      	b.n	80018e8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	d492      	bmi.n	8001882 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
 800195e:	e7d2      	b.n	8001906 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001960:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001964:	4393      	bics	r3, r2
 8001966:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001968:	f7ff fa56 	bl	8000e18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 800196e:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	6833      	ldr	r3, [r6, #0]
 8001974:	421f      	tst	r7, r3
 8001976:	d0ab      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff fa4e 	bl	8000e18 <HAL_GetTick>
 800197c:	1b00      	subs	r0, r0, r4
 800197e:	4540      	cmp	r0, r8
 8001980:	d9f7      	bls.n	8001972 <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
 8001984:	e7bf      	b.n	8001906 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001986:	330a      	adds	r3, #10
 8001988:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	4699      	mov	r9, r3
 800198e:	e004      	b.n	800199a <HAL_RCC_ClockConfig+0x166>
 8001990:	f7ff fa42 	bl	8000e18 <HAL_GetTick>
 8001994:	1bc0      	subs	r0, r0, r7
 8001996:	4548      	cmp	r0, r9
 8001998:	d8d3      	bhi.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800199a:	4642      	mov	r2, r8
 800199c:	68f3      	ldr	r3, [r6, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d1f5      	bne.n	8001990 <HAL_RCC_ClockConfig+0x15c>
 80019a4:	e78e      	b.n	80018c4 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a6:	3309      	adds	r3, #9
 80019a8:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	4699      	mov	r9, r3
 80019ae:	e004      	b.n	80019ba <HAL_RCC_ClockConfig+0x186>
 80019b0:	f7ff fa32 	bl	8000e18 <HAL_GetTick>
 80019b4:	1bc0      	subs	r0, r0, r7
 80019b6:	4548      	cmp	r0, r9
 80019b8:	d8c3      	bhi.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	4642      	mov	r2, r8
 80019bc:	68f3      	ldr	r3, [r6, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d1f5      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x17c>
 80019c4:	e77e      	b.n	80018c4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	075b      	lsls	r3, r3, #29
 80019c8:	d500      	bpl.n	80019cc <HAL_RCC_ClockConfig+0x198>
 80019ca:	e75a      	b.n	8001882 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
 80019ce:	e79a      	b.n	8001906 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d0:	330b      	adds	r3, #11
 80019d2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4699      	mov	r9, r3
 80019d8:	e004      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1b0>
 80019da:	f7ff fa1d 	bl	8000e18 <HAL_GetTick>
 80019de:	1bc0      	subs	r0, r0, r7
 80019e0:	4548      	cmp	r0, r9
 80019e2:	d8ae      	bhi.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e4:	4642      	mov	r2, r8
 80019e6:	68f3      	ldr	r3, [r6, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d1f5      	bne.n	80019da <HAL_RCC_ClockConfig+0x1a6>
 80019ee:	e769      	b.n	80018c4 <HAL_RCC_ClockConfig+0x90>
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	00001388 	.word	0x00001388
 80019fc:	fffff8ff 	.word	0xfffff8ff
 8001a00:	08003768 	.word	0x08003768
 8001a04:	20000004 	.word	0x20000004
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	ffffc7ff 	.word	0xffffc7ff

08001a10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4905      	ldr	r1, [pc, #20]	@ (8001a2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	0f5b      	lsrs	r3, r3, #29
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	6810      	ldr	r0, [r2, #0]
 8001a20:	40d8      	lsrs	r0, r3
}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	08003760 	.word	0x08003760

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4905      	ldr	r1, [pc, #20]	@ (8001a4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	0f5b      	lsrs	r3, r3, #29
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	6810      	ldr	r0, [r2, #0]
 8001a40:	40d8      	lsrs	r0, r3
}
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	08003760 	.word	0x08003760

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	46ce      	mov	lr, r9
 8001a54:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a56:	6803      	ldr	r3, [r0, #0]
{
 8001a58:	0004      	movs	r4, r0
 8001a5a:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a5c:	069a      	lsls	r2, r3, #26
 8001a5e:	d567      	bpl.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a60:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001a62:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a64:	4a61      	ldr	r2, [pc, #388]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001a66:	055b      	lsls	r3, r3, #21
 8001a68:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001a6a:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6c:	4219      	tst	r1, r3
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001a70:	e091      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	2680      	movs	r6, #128	@ 0x80
 8001a74:	4d5e      	ldr	r5, [pc, #376]	@ (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001a76:	0076      	lsls	r6, r6, #1
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	4233      	tst	r3, r6
 8001a7c:	d100      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8001a7e:	e096      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x15e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a80:	20c0      	movs	r0, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a82:	495a      	ldr	r1, [pc, #360]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a84:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a86:	680a      	ldr	r2, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a88:	0380      	lsls	r0, r0, #14
 8001a8a:	405a      	eors	r2, r3
 8001a8c:	4202      	tst	r2, r0
 8001a8e:	d006      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a90:	22c0      	movs	r2, #192	@ 0xc0
 8001a92:	0018      	movs	r0, r3
 8001a94:	0292      	lsls	r2, r2, #10
 8001a96:	4010      	ands	r0, r2
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001a9c:	e09f      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x18e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a9e:	4d53      	ldr	r5, [pc, #332]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001aa0:	22c0      	movs	r2, #192	@ 0xc0
 8001aa2:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001aa4:	0292      	lsls	r2, r2, #10
 8001aa6:	0006      	movs	r6, r0

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aa8:	6821      	ldr	r1, [r4, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001aaa:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001aac:	4210      	tst	r0, r2
 8001aae:	d024      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	42b2      	cmp	r2, r6
 8001ab4:	d021      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0xaa>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ab6:	0689      	lsls	r1, r1, #26
 8001ab8:	d536      	bpl.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aba:	2680      	movs	r6, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001abc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001abe:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8001ac0:	0336      	lsls	r6, r6, #12
 8001ac2:	433e      	orrs	r6, r7
 8001ac4:	652e      	str	r6, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac6:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ac8:	484a      	ldr	r0, [pc, #296]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aca:	4f4b      	ldr	r7, [pc, #300]	@ (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001acc:	4008      	ands	r0, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ace:	403e      	ands	r6, r7
 8001ad0:	652e      	str	r6, [r5, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ad2:	6528      	str	r0, [r5, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ad4:	05c9      	lsls	r1, r1, #23
 8001ad6:	d516      	bpl.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f99e 	bl	8000e18 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001adc:	2780      	movs	r7, #128	@ 0x80
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
        tickstart = HAL_GetTick();
 8001ae0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae4:	00bf      	lsls	r7, r7, #2
 8001ae6:	e004      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f996 	bl	8000e18 <HAL_GetTick>
 8001aec:	1b80      	subs	r0, r0, r6
 8001aee:	4548      	cmp	r0, r9
 8001af0:	d86c      	bhi.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001af2:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8001af4:	423b      	tst	r3, r7
 8001af6:	d0f7      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001af8:	6821      	ldr	r1, [r4, #0]
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001afa:	0689      	lsls	r1, r1, #26
 8001afc:	d514      	bpl.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001afe:	22c0      	movs	r2, #192	@ 0xc0
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	0292      	lsls	r2, r2, #10
 8001b04:	401a      	ands	r2, r3
 8001b06:	21c0      	movs	r1, #192	@ 0xc0
 8001b08:	0289      	lsls	r1, r1, #10
 8001b0a:	428a      	cmp	r2, r1
 8001b0c:	d108      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001b0e:	4837      	ldr	r0, [pc, #220]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b10:	4d3b      	ldr	r5, [pc, #236]	@ (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b12:	6801      	ldr	r1, [r0, #0]
 8001b14:	4029      	ands	r1, r5
 8001b16:	25c0      	movs	r5, #192	@ 0xc0
 8001b18:	03ad      	lsls	r5, r5, #14
 8001b1a:	402b      	ands	r3, r5
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6003      	str	r3, [r0, #0]
 8001b20:	4932      	ldr	r1, [pc, #200]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b22:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8001b24:	4313      	orrs	r3, r2
 8001b26:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b28:	4643      	mov	r3, r8
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d050      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	07da      	lsls	r2, r3, #31
 8001b32:	d506      	bpl.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b34:	2003      	movs	r0, #3
 8001b36:	492d      	ldr	r1, [pc, #180]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b38:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001b3a:	4382      	bics	r2, r0
 8001b3c:	68a0      	ldr	r0, [r4, #8]
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b42:	079a      	lsls	r2, r3, #30
 8001b44:	d506      	bpl.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b46:	200c      	movs	r0, #12
 8001b48:	4928      	ldr	r1, [pc, #160]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b4a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001b4c:	4382      	bics	r2, r0
 8001b4e:	68e0      	ldr	r0, [r4, #12]
 8001b50:	4302      	orrs	r2, r0
 8001b52:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b54:	075a      	lsls	r2, r3, #29
 8001b56:	d506      	bpl.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b58:	4924      	ldr	r1, [pc, #144]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b5a:	482a      	ldr	r0, [pc, #168]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001b5c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001b5e:	4002      	ands	r2, r0
 8001b60:	6920      	ldr	r0, [r4, #16]
 8001b62:	4302      	orrs	r2, r0
 8001b64:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b66:	071a      	lsls	r2, r3, #28
 8001b68:	d506      	bpl.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b6a:	4920      	ldr	r1, [pc, #128]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b6c:	4826      	ldr	r0, [pc, #152]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b6e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001b70:	4002      	ands	r2, r0
 8001b72:	6960      	ldr	r0, [r4, #20]
 8001b74:	4302      	orrs	r2, r0
 8001b76:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	d404      	bmi.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001b7c:	2000      	movs	r0, #0
}
 8001b7e:	bcc0      	pop	{r6, r7}
 8001b80:	46b9      	mov	r9, r7
 8001b82:	46b0      	mov	r8, r6
 8001b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001b88:	4920      	ldr	r1, [pc, #128]	@ (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b8a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	69a1      	ldr	r1, [r4, #24]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b94:	e7f2      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	2680      	movs	r6, #128	@ 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8001b9e:	2301      	movs	r3, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4d13      	ldr	r5, [pc, #76]	@ (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      pwrclkchanged = SET;
 8001ba2:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	0076      	lsls	r6, r6, #1
 8001ba8:	4233      	tst	r3, r6
 8001baa:	d000      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001bac:	e768      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	4333      	orrs	r3, r6
 8001bb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f930 	bl	8000e18 <HAL_GetTick>
 8001bb8:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	4233      	tst	r3, r6
 8001bbe:	d000      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001bc0:	e75e      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7ff f929 	bl	8000e18 <HAL_GetTick>
 8001bc6:	1bc0      	subs	r0, r0, r7
 8001bc8:	2864      	cmp	r0, #100	@ 0x64
 8001bca:	d9f6      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x16a>
          return HAL_TIMEOUT;
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e7d6      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001bd2:	490f      	ldr	r1, [pc, #60]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bd4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	e7a8      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001bde:	680a      	ldr	r2, [r1, #0]
 8001be0:	0392      	lsls	r2, r2, #14
 8001be2:	d400      	bmi.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001be4:	e75b      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
          return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	e7c9      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	fffcffff 	.word	0xfffcffff
 8001bf8:	fff7ffff 	.word	0xfff7ffff
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	ffcfffff 	.word	0xffcfffff
 8001c04:	fffff3ff 	.word	0xfffff3ff
 8001c08:	ffffcfff 	.word	0xffffcfff
 8001c0c:	fff3ffff 	.word	0xfff3ffff
 8001c10:	efffffff 	.word	0xefffffff

08001c14 <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	46c6      	mov	lr, r8
 8001c18:	b500      	push	{lr}
 8001c1a:	001d      	movs	r5, r3
 8001c1c:	0016      	movs	r6, r2
 8001c1e:	b082      	sub	sp, #8
 8001c20:	000c      	movs	r4, r1
 8001c22:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c24:	f7ff f8f8 	bl	8000e18 <HAL_GetTick>
 8001c28:	19ad      	adds	r5, r5, r6
 8001c2a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001c2c:	f7ff f8f4 	bl	8000e18 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c30:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xc4>)
  tmp_tickstart = HAL_GetTick();
 8001c32:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c34:	681b      	ldr	r3, [r3, #0]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c36:	6839      	ldr	r1, [r7, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	0d1b      	lsrs	r3, r3, #20
 8001c3c:	436b      	muls	r3, r5
 8001c3e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c40:	3601      	adds	r6, #1
 8001c42:	d117      	bne.n	8001c74 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x60>
 8001c44:	688b      	ldr	r3, [r1, #8]
 8001c46:	4023      	ands	r3, r4
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	d0fb      	beq.n	8001c44 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8001c4c:	2000      	movs	r0, #0
}
 8001c4e:	b002      	add	sp, #8
 8001c50:	bc80      	pop	{r7}
 8001c52:	46b8      	mov	r8, r7
 8001c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c56:	f7ff f8df 	bl	8000e18 <HAL_GetTick>
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	1ac0      	subs	r0, r0, r3
 8001c5e:	42a8      	cmp	r0, r5
 8001c60:	d20d      	bcs.n	8001c7e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x6a>
      if (count == 0U)
 8001c62:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c64:	6839      	ldr	r1, [r7, #0]
        tmp_timeout = 0U;
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	4193      	sbcs	r3, r2
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	401d      	ands	r5, r3
      count--;
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c74:	688b      	ldr	r3, [r1, #8]
 8001c76:	4023      	ands	r3, r4
 8001c78:	429c      	cmp	r4, r3
 8001c7a:	d0ec      	beq.n	8001c56 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x42>
 8001c7c:	e7e6      	b.n	8001c4c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c7e:	21e0      	movs	r1, #224	@ 0xe0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	438a      	bics	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c88:	2282      	movs	r2, #130	@ 0x82
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	0052      	lsls	r2, r2, #1
 8001c8e:	4291      	cmp	r1, r2
 8001c90:	d013      	beq.n	8001cba <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c96:	0189      	lsls	r1, r1, #6
 8001c98:	428a      	cmp	r2, r1
 8001c9a:	d106      	bne.n	8001caa <SPI_WaitFlagStateUntilTimeout.constprop.1+0x96>
          SPI_RESET_CRC(hspi);
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	480f      	ldr	r0, [pc, #60]	@ (8001cdc <SPI_WaitFlagStateUntilTimeout.constprop.1+0xc8>)
 8001ca0:	4001      	ands	r1, r0
 8001ca2:	6019      	str	r1, [r3, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001caa:	2351      	movs	r3, #81	@ 0x51
 8001cac:	2201      	movs	r2, #1
 8001cae:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001cb8:	e7c9      	b.n	8001c4e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	0209      	lsls	r1, r1, #8
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d003      	beq.n	8001ccc <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	00c9      	lsls	r1, r1, #3
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d1e2      	bne.n	8001c92 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8001ccc:	2140      	movs	r1, #64	@ 0x40
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e7dd      	b.n	8001c92 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7e>
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	ffffdfff 	.word	0xffffdfff

08001ce0 <HAL_SPI_Init>:
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	46d6      	mov	lr, sl
 8001ce4:	464f      	mov	r7, r9
 8001ce6:	4646      	mov	r6, r8
 8001ce8:	0004      	movs	r4, r0
 8001cea:	b5c0      	push	{r6, r7, lr}
  if (hspi == NULL)
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d100      	bne.n	8001cf2 <HAL_SPI_Init+0x12>
 8001cf0:	e074      	b.n	8001ddc <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cf2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d059      	beq.n	8001dac <HAL_SPI_Init+0xcc>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cfc:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d02:	3351      	adds	r3, #81	@ 0x51
 8001d04:	5ce3      	ldrb	r3, [r4, r3]
 8001d06:	2600      	movs	r6, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d05c      	beq.n	8001dc6 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d0c:	2351      	movs	r3, #81	@ 0x51
 8001d0e:	4699      	mov	r9, r3
 8001d10:	464a      	mov	r2, r9
  __HAL_SPI_DISABLE(hspi);
 8001d12:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d14:	2782      	movs	r7, #130	@ 0x82
 8001d16:	2584      	movs	r5, #132	@ 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d18:	3b4f      	subs	r3, #79	@ 0x4f
 8001d1a:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 8001d1c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d1e:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8001d20:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d22:	007f      	lsls	r7, r7, #1
  __HAL_SPI_DISABLE(hspi);
 8001d24:	438b      	bics	r3, r1
 8001d26:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	022d      	lsls	r5, r5, #8
 8001d2c:	403b      	ands	r3, r7
 8001d2e:	68a7      	ldr	r7, [r4, #8]
 8001d30:	69a1      	ldr	r1, [r4, #24]
 8001d32:	402f      	ands	r7, r5
 8001d34:	2580      	movs	r5, #128	@ 0x80
 8001d36:	433b      	orrs	r3, r7
 8001d38:	68e7      	ldr	r7, [r4, #12]
 8001d3a:	012d      	lsls	r5, r5, #4
 8001d3c:	402f      	ands	r7, r5
 8001d3e:	4665      	mov	r5, ip
 8001d40:	433b      	orrs	r3, r7
 8001d42:	6927      	ldr	r7, [r4, #16]
 8001d44:	402f      	ands	r7, r5
 8001d46:	3d01      	subs	r5, #1
 8001d48:	46aa      	mov	sl, r5
 8001d4a:	433b      	orrs	r3, r7
 8001d4c:	4657      	mov	r7, sl
 8001d4e:	6965      	ldr	r5, [r4, #20]
 8001d50:	403d      	ands	r5, r7
 8001d52:	432b      	orrs	r3, r5
 8001d54:	2580      	movs	r5, #128	@ 0x80
 8001d56:	00ad      	lsls	r5, r5, #2
 8001d58:	400d      	ands	r5, r1
 8001d5a:	432b      	orrs	r3, r5
 8001d5c:	69e5      	ldr	r5, [r4, #28]
 8001d5e:	46ac      	mov	ip, r5
 8001d60:	2538      	movs	r5, #56	@ 0x38
 8001d62:	46a8      	mov	r8, r5
 8001d64:	4665      	mov	r5, ip
 8001d66:	4647      	mov	r7, r8
 8001d68:	403d      	ands	r5, r7
 8001d6a:	432b      	orrs	r3, r5
 8001d6c:	6a25      	ldr	r5, [r4, #32]
 8001d6e:	46ac      	mov	ip, r5
 8001d70:	2580      	movs	r5, #128	@ 0x80
 8001d72:	46a8      	mov	r8, r5
 8001d74:	4665      	mov	r5, ip
 8001d76:	4647      	mov	r7, r8
 8001d78:	403d      	ands	r5, r7
 8001d7a:	432b      	orrs	r3, r5
 8001d7c:	4333      	orrs	r3, r6
 8001d7e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d80:	0c0b      	lsrs	r3, r1, #16
 8001d82:	2104      	movs	r1, #4
 8001d84:	4019      	ands	r1, r3
 8001d86:	2310      	movs	r3, #16
 8001d88:	4003      	ands	r3, r0
 8001d8a:	4319      	orrs	r1, r3
 8001d8c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d8e:	69d3      	ldr	r3, [r2, #28]
 8001d90:	4913      	ldr	r1, [pc, #76]	@ (8001de0 <HAL_SPI_Init+0x100>)
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d94:	400b      	ands	r3, r1
 8001d96:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d98:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d9a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d9c:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d9e:	464b      	mov	r3, r9
 8001da0:	54e2      	strb	r2, [r4, r3]
}
 8001da2:	bce0      	pop	{r5, r6, r7}
 8001da4:	46ba      	mov	sl, r7
 8001da6:	46b1      	mov	r9, r6
 8001da8:	46a8      	mov	r8, r5
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dac:	2382      	movs	r3, #130	@ 0x82
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d0a3      	beq.n	8001cfe <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db8:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dba:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	3351      	adds	r3, #81	@ 0x51
 8001dbe:	5ce3      	ldrb	r3, [r4, r3]
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1a2      	bne.n	8001d0c <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8001dc6:	3350      	adds	r3, #80	@ 0x50
 8001dc8:	54e6      	strb	r6, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f7fe ff00 	bl	8000bd0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001dd4:	019b      	lsls	r3, r3, #6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dd6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dd8:	401e      	ands	r6, r3
 8001dda:	e797      	b.n	8001d0c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8001ddc:	2001      	movs	r0, #1
 8001dde:	e7e0      	b.n	8001da2 <HAL_SPI_Init+0xc2>
 8001de0:	fffff7ff 	.word	0xfffff7ff

08001de4 <HAL_SPI_Transmit>:
{
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	464f      	mov	r7, r9
 8001de8:	4646      	mov	r6, r8
 8001dea:	46d6      	mov	lr, sl
 8001dec:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001dee:	2350      	movs	r3, #80	@ 0x50
{
 8001df0:	b5c0      	push	{r6, r7, lr}
 8001df2:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001df4:	5cc2      	ldrb	r2, [r0, r3]
{
 8001df6:	0004      	movs	r4, r0
 8001df8:	000e      	movs	r6, r1
 8001dfa:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001dfc:	2a01      	cmp	r2, #1
 8001dfe:	d100      	bne.n	8001e02 <HAL_SPI_Transmit+0x1e>
 8001e00:	e08d      	b.n	8001f1e <HAL_SPI_Transmit+0x13a>
 8001e02:	2201      	movs	r2, #1
 8001e04:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001e06:	f7ff f807 	bl	8000e18 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e0a:	2251      	movs	r2, #81	@ 0x51
 8001e0c:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8001e0e:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e10:	b2df      	uxtb	r7, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d00a      	beq.n	8001e2c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 8001e16:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001e18:	2350      	movs	r3, #80	@ 0x50
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	54e2      	strb	r2, [r4, r3]
}
 8001e1e:	0038      	movs	r0, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bce0      	pop	{r5, r6, r7}
 8001e24:	46ba      	mov	sl, r7
 8001e26:	46b1      	mov	r9, r6
 8001e28:	46a8      	mov	r8, r5
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001e2c:	2e00      	cmp	r6, #0
 8001e2e:	d0f3      	beq.n	8001e18 <HAL_SPI_Transmit+0x34>
 8001e30:	464b      	mov	r3, r9
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_SPI_Transmit+0x34>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e36:	2303      	movs	r3, #3
 8001e38:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3a:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8001e3c:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e40:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001e42:	86e2      	strh	r2, [r4, #54]	@ 0x36
  hspi->RxXferSize  = 0U;
 8001e44:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e46:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e48:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e4a:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4c:	2380      	movs	r3, #128	@ 0x80
  hspi->TxXferSize  = Size;
 8001e4e:	86a2      	strh	r2, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e50:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001e52:	6822      	ldr	r2, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e54:	6326      	str	r6, [r4, #48]	@ 0x30
    __HAL_SPI_DISABLE(hspi);
 8001e56:	0010      	movs	r0, r2
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	4299      	cmp	r1, r3
 8001e5c:	d100      	bne.n	8001e60 <HAL_SPI_Transmit+0x7c>
 8001e5e:	e08b      	b.n	8001f78 <HAL_SPI_Transmit+0x194>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e60:	2340      	movs	r3, #64	@ 0x40
 8001e62:	6811      	ldr	r1, [r2, #0]
 8001e64:	420b      	tst	r3, r1
 8001e66:	d102      	bne.n	8001e6e <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8001e68:	6811      	ldr	r1, [r2, #0]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e70:	68e1      	ldr	r1, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e72:	469a      	mov	sl, r3
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d052      	beq.n	8001f22 <HAL_SPI_Transmit+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e7c:	4653      	mov	r3, sl
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d100      	bne.n	8001e84 <HAL_SPI_Transmit+0xa0>
 8001e82:	e09f      	b.n	8001fc4 <HAL_SPI_Transmit+0x1e0>
 8001e84:	464b      	mov	r3, r9
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d100      	bne.n	8001e8c <HAL_SPI_Transmit+0xa8>
 8001e8a:	e09b      	b.n	8001fc4 <HAL_SPI_Transmit+0x1e0>
    while (hspi->TxXferCount > 0U)
 8001e8c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <HAL_SPI_Transmit+0xda>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e92:	2602      	movs	r6, #2
 8001e94:	1c6b      	adds	r3, r5, #1
 8001e96:	d000      	beq.n	8001e9a <HAL_SPI_Transmit+0xb6>
 8001e98:	e085      	b.n	8001fa6 <HAL_SPI_Transmit+0x1c2>
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4216      	tst	r6, r2
 8001ea0:	d100      	bne.n	8001ea4 <HAL_SPI_Transmit+0xc0>
 8001ea2:	e099      	b.n	8001fd8 <HAL_SPI_Transmit+0x1f4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001eaa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001eae:	3901      	subs	r1, #1
 8001eb0:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb2:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8001eb4:	86e1      	strh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb6:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 8001eb8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_SPI_Transmit+0xb6>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	469a      	mov	sl, r3
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800203c <HAL_SPI_Transmit+0x258>)
 8001ec4:	495e      	ldr	r1, [pc, #376]	@ (8002040 <HAL_SPI_Transmit+0x25c>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f7fe f930 	bl	800012c <__udivsi3>
 8001ecc:	0143      	lsls	r3, r0, #5
 8001ece:	1a1b      	subs	r3, r3, r0
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	181b      	adds	r3, r3, r0
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ed8:	2382      	movs	r3, #130	@ 0x82
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001eda:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	459a      	cmp	sl, r3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_SPI_Transmit+0x10e>
 8001ee2:	e09c      	b.n	800201e <HAL_SPI_Transmit+0x23a>
      count--;
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	421a      	tst	r2, r3
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0x114>
      if (count == 0U)
 8001ef2:	9b01      	ldr	r3, [sp, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f5      	bne.n	8001ee4 <HAL_SPI_Transmit+0x100>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ef8:	68a3      	ldr	r3, [r4, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_SPI_Transmit+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	9200      	str	r2, [sp, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f0c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d000      	beq.n	8001f14 <HAL_SPI_Transmit+0x130>
 8001f12:	e781      	b.n	8001e18 <HAL_SPI_Transmit+0x34>
    hspi->State = HAL_SPI_STATE_READY;
 8001f14:	2201      	movs	r2, #1
 8001f16:	3351      	adds	r3, #81	@ 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f18:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 8001f1a:	54e2      	strb	r2, [r4, r3]
 8001f1c:	e77c      	b.n	8001e18 <HAL_SPI_Transmit+0x34>
  __HAL_LOCK(hspi);
 8001f1e:	2702      	movs	r7, #2
 8001f20:	e77d      	b.n	8001e1e <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f22:	4653      	mov	r3, sl
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d000      	beq.n	8001f2a <HAL_SPI_Transmit+0x146>
 8001f28:	e075      	b.n	8002016 <HAL_SPI_Transmit+0x232>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2a:	8833      	ldrh	r3, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2c:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2e:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8001f30:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f32:	6326      	str	r6, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8001f3a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0c0      	beq.n	8001ec2 <HAL_SPI_Transmit+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f40:	2602      	movs	r6, #2
 8001f42:	1c6b      	adds	r3, r5, #1
 8001f44:	d15d      	bne.n	8002002 <HAL_SPI_Transmit+0x21e>
 8001f46:	6893      	ldr	r3, [r2, #8]
 8001f48:	421e      	tst	r6, r3
 8001f4a:	d00e      	beq.n	8001f6a <HAL_SPI_Transmit+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f4e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f50:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f52:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f54:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f56:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8001f5e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ac      	beq.n	8001ebe <HAL_SPI_Transmit+0xda>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f64:	6893      	ldr	r3, [r2, #8]
 8001f66:	421e      	tst	r6, r3
 8001f68:	d1f0      	bne.n	8001f4c <HAL_SPI_Transmit+0x168>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f6a:	f7fe ff55 	bl	8000e18 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001f6e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0a4      	beq.n	8001ebe <HAL_SPI_Transmit+0xda>
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	e7e6      	b.n	8001f46 <HAL_SPI_Transmit+0x162>
    __HAL_SPI_DISABLE(hspi);
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	438b      	bics	r3, r1
 8001f7e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	6811      	ldr	r1, [r2, #0]
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e769      	b.n	8001e60 <HAL_SPI_Transmit+0x7c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f94:	3301      	adds	r3, #1
 8001f96:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f98:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8001fa0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d08b      	beq.n	8001ebe <HAL_SPI_Transmit+0xda>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4216      	tst	r6, r2
 8001fac:	d1ee      	bne.n	8001f8c <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fae:	f7fe ff33 	bl	8000e18 <HAL_GetTick>
 8001fb2:	4643      	mov	r3, r8
 8001fb4:	1ac0      	subs	r0, r0, r3
 8001fb6:	42a8      	cmp	r0, r5
 8001fb8:	d3f2      	bcc.n	8001fa0 <HAL_SPI_Transmit+0x1bc>
          hspi->State = HAL_SPI_STATE_READY;
 8001fba:	2351      	movs	r3, #81	@ 0x51
 8001fbc:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8001fbe:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001fc0:	54e2      	strb	r2, [r4, r3]
          goto error;
 8001fc2:	e729      	b.n	8001e18 <HAL_SPI_Transmit+0x34>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fc4:	7833      	ldrb	r3, [r6, #0]
 8001fc6:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fca:	3301      	adds	r3, #1
 8001fcc:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8001fd6:	e759      	b.n	8001e8c <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd8:	f7fe ff1e 	bl	8000e18 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001fdc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d000      	beq.n	8001fe4 <HAL_SPI_Transmit+0x200>
 8001fe2:	e75a      	b.n	8001e9a <HAL_SPI_Transmit+0xb6>
 8001fe4:	e76b      	b.n	8001ebe <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fe8:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fea:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fee:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ff0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8001ff8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_SPI_Transmit+0x21c>
 8001ffe:	e75e      	b.n	8001ebe <HAL_SPI_Transmit+0xda>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	6883      	ldr	r3, [r0, #8]
 8002004:	421e      	tst	r6, r3
 8002006:	d1ee      	bne.n	8001fe6 <HAL_SPI_Transmit+0x202>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002008:	f7fe ff06 	bl	8000e18 <HAL_GetTick>
 800200c:	4643      	mov	r3, r8
 800200e:	1ac0      	subs	r0, r0, r3
 8002010:	42a8      	cmp	r0, r5
 8002012:	d3f1      	bcc.n	8001ff8 <HAL_SPI_Transmit+0x214>
 8002014:	e7d1      	b.n	8001fba <HAL_SPI_Transmit+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002016:	464b      	mov	r3, r9
 8002018:	2b01      	cmp	r3, #1
 800201a:	d18e      	bne.n	8001f3a <HAL_SPI_Transmit+0x156>
 800201c:	e785      	b.n	8001f2a <HAL_SPI_Transmit+0x146>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800201e:	4643      	mov	r3, r8
 8002020:	002a      	movs	r2, r5
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0020      	movs	r0, r4
 8002026:	f7ff fdf5 	bl	8001c14 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 800202a:	2800      	cmp	r0, #0
 800202c:	d100      	bne.n	8002030 <HAL_SPI_Transmit+0x24c>
 800202e:	e763      	b.n	8001ef8 <HAL_SPI_Transmit+0x114>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002030:	2220      	movs	r2, #32
 8002032:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002034:	4313      	orrs	r3, r2
 8002036:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002038:	6562      	str	r2, [r4, #84]	@ 0x54
 800203a:	e75d      	b.n	8001ef8 <HAL_SPI_Transmit+0x114>
 800203c:	20000004 	.word	0x20000004
 8002040:	016e3600 	.word	0x016e3600

08002044 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8002044:	4770      	bx	lr
 8002046:	46c0      	nop			@ (mov r8, r8)

08002048 <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002048:	2241      	movs	r2, #65	@ 0x41
{
 800204a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800204c:	6801      	ldr	r1, [r0, #0]
{
 800204e:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002050:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002052:	688b      	ldr	r3, [r1, #8]
{
 8002054:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002056:	401a      	ands	r2, r3
 8002058:	2a01      	cmp	r2, #1
 800205a:	d060      	beq.n	800211e <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800205c:	079a      	lsls	r2, r3, #30
 800205e:	d501      	bpl.n	8002064 <HAL_SPI_IRQHandler+0x1c>
 8002060:	0602      	lsls	r2, r0, #24
 8002062:	d462      	bmi.n	800212a <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002064:	22b0      	movs	r2, #176	@ 0xb0
 8002066:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002068:	4213      	tst	r3, r2
 800206a:	d056      	beq.n	800211a <HAL_SPI_IRQHandler+0xd2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800206c:	0682      	lsls	r2, r0, #26
 800206e:	d554      	bpl.n	800211a <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002070:	065a      	lsls	r2, r3, #25
 8002072:	d50e      	bpl.n	8002092 <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002074:	2251      	movs	r2, #81	@ 0x51
 8002076:	5ca2      	ldrb	r2, [r4, r2]
 8002078:	2a03      	cmp	r2, #3
 800207a:	d05e      	beq.n	800213a <HAL_SPI_IRQHandler+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800207c:	2504      	movs	r5, #4
 800207e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002080:	432a      	orrs	r2, r5
 8002082:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002084:	2200      	movs	r2, #0
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	68ca      	ldr	r2, [r1, #12]
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	688a      	ldr	r2, [r1, #8]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002092:	069a      	lsls	r2, r3, #26
 8002094:	d50c      	bpl.n	80020b0 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002096:	2501      	movs	r5, #1
 8002098:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800209a:	432a      	orrs	r2, r5
 800209c:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800209e:	2200      	movs	r2, #0
 80020a0:	9202      	str	r2, [sp, #8]
 80020a2:	688a      	ldr	r2, [r1, #8]
 80020a4:	353f      	adds	r5, #63	@ 0x3f
 80020a6:	9202      	str	r2, [sp, #8]
 80020a8:	680a      	ldr	r2, [r1, #0]
 80020aa:	43aa      	bics	r2, r5
 80020ac:	600a      	str	r2, [r1, #0]
 80020ae:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80020b0:	05db      	lsls	r3, r3, #23
 80020b2:	d508      	bpl.n	80020c6 <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80020b4:	2208      	movs	r2, #8
 80020b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020b8:	4313      	orrs	r3, r2
 80020ba:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80020bc:	2300      	movs	r3, #0
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	688b      	ldr	r3, [r1, #8]
 80020c2:	9303      	str	r3, [sp, #12]
 80020c4:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d026      	beq.n	800211a <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80020cc:	22e0      	movs	r2, #224	@ 0xe0
 80020ce:	684b      	ldr	r3, [r1, #4]
 80020d0:	4393      	bics	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80020d4:	2351      	movs	r3, #81	@ 0x51
 80020d6:	3adf      	subs	r2, #223	@ 0xdf
 80020d8:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80020da:	3b4e      	subs	r3, #78	@ 0x4e
 80020dc:	4203      	tst	r3, r0
 80020de:	d028      	beq.n	8002132 <HAL_SPI_IRQHandler+0xea>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80020e0:	684a      	ldr	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 80020e2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80020e4:	439a      	bics	r2, r3
 80020e6:	604a      	str	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d009      	beq.n	8002100 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <HAL_SPI_IRQHandler+0x104>)
 80020ee:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80020f0:	f7fe ff1a 	bl	8000f28 <HAL_DMA_Abort_IT>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d003      	beq.n	8002100 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020f8:	2240      	movs	r2, #64	@ 0x40
 80020fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002100:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002102:	2800      	cmp	r0, #0
 8002104:	d009      	beq.n	800211a <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_SPI_IRQHandler+0x104>)
 8002108:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800210a:	f7fe ff0d 	bl	8000f28 <HAL_DMA_Abort_IT>
 800210e:	2800      	cmp	r0, #0
 8002110:	d003      	beq.n	800211a <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002116:	4313      	orrs	r3, r2
 8002118:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800211a:	b005      	add	sp, #20
 800211c:	bd30      	pop	{r4, r5, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800211e:	0642      	lsls	r2, r0, #25
 8002120:	d59c      	bpl.n	800205c <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8002122:	0020      	movs	r0, r4
 8002124:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002126:	4798      	blx	r3
    return;
 8002128:	e7f7      	b.n	800211a <HAL_SPI_IRQHandler+0xd2>
    hspi->TxISR(hspi);
 800212a:	0020      	movs	r0, r4
 800212c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800212e:	4798      	blx	r3
    return;
 8002130:	e7f3      	b.n	800211a <HAL_SPI_IRQHandler+0xd2>
        HAL_SPI_ErrorCallback(hspi);
 8002132:	0020      	movs	r0, r4
 8002134:	f7ff ff86 	bl	8002044 <HAL_SPI_ErrorCallback>
 8002138:	e7ef      	b.n	800211a <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800213a:	2300      	movs	r3, #0
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	68cb      	ldr	r3, [r1, #12]
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	688b      	ldr	r3, [r1, #8]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	9b01      	ldr	r3, [sp, #4]
        return;
 8002148:	e7e7      	b.n	800211a <HAL_SPI_IRQHandler+0xd2>
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	08002151 	.word	0x08002151

08002150 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8002150:	2300      	movs	r3, #0
{
 8002152:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002154:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 8002156:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002158:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 800215a:	f7ff ff73 	bl	8002044 <HAL_SPI_ErrorCallback>
}
 800215e:	bd10      	pop	{r4, pc}

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b510      	push	{r4, lr}
 8002162:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	d039      	beq.n	80021da <HAL_TIM_Base_Init+0x7a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	2339      	movs	r3, #57	@ 0x39
 8002168:	5cc3      	ldrb	r3, [r0, r3]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02f      	beq.n	80021d0 <HAL_TIM_Base_Init+0x70>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	2339      	movs	r3, #57	@ 0x39
 8002172:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	2180      	movs	r1, #128	@ 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8002176:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217a:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 800217c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217e:	428a      	cmp	r2, r1
 8002180:	d005      	beq.n	800218e <HAL_TIM_Base_Init+0x2e>
 8002182:	4917      	ldr	r1, [pc, #92]	@ (80021e0 <HAL_TIM_Base_Init+0x80>)
 8002184:	428a      	cmp	r2, r1
 8002186:	d002      	beq.n	800218e <HAL_TIM_Base_Init+0x2e>
 8002188:	4916      	ldr	r1, [pc, #88]	@ (80021e4 <HAL_TIM_Base_Init+0x84>)
 800218a:	428a      	cmp	r2, r1
 800218c:	d107      	bne.n	800219e <HAL_TIM_Base_Init+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218e:	2170      	movs	r1, #112	@ 0x70
 8002190:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002192:	68a1      	ldr	r1, [r4, #8]
 8002194:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	4914      	ldr	r1, [pc, #80]	@ (80021e8 <HAL_TIM_Base_Init+0x88>)
 8002198:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219a:	6921      	ldr	r1, [r4, #16]
 800219c:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219e:	2180      	movs	r1, #128	@ 0x80
 80021a0:	438b      	bics	r3, r1
 80021a2:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 80021a4:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a6:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80021a8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021aa:	68e3      	ldr	r3, [r4, #12]
 80021ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b2:	2301      	movs	r3, #1
 80021b4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b6:	223e      	movs	r2, #62	@ 0x3e
 80021b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ba:	3a04      	subs	r2, #4
 80021bc:	54a3      	strb	r3, [r4, r2]
 80021be:	3201      	adds	r2, #1
 80021c0:	54a3      	strb	r3, [r4, r2]
 80021c2:	3201      	adds	r2, #1
 80021c4:	54a3      	strb	r3, [r4, r2]
 80021c6:	3201      	adds	r2, #1
 80021c8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	3a04      	subs	r2, #4
 80021cc:	54a3      	strb	r3, [r4, r2]
}
 80021ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80021d0:	3338      	adds	r3, #56	@ 0x38
 80021d2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80021d4:	f7fe fd52 	bl	8000c7c <HAL_TIM_Base_MspInit>
 80021d8:	e7ca      	b.n	8002170 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e7f7      	b.n	80021ce <HAL_TIM_Base_Init+0x6e>
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	40010800 	.word	0x40010800
 80021e4:	40011400 	.word	0x40011400
 80021e8:	fffffcff 	.word	0xfffffcff

080021ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ec:	2338      	movs	r3, #56	@ 0x38
{
 80021ee:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80021f0:	5cc3      	ldrb	r3, [r0, r3]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d021      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f6:	2339      	movs	r3, #57	@ 0x39
 80021f8:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021fa:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002202:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002204:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002206:	680d      	ldr	r5, [r1, #0]
 8002208:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800220a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	05d2      	lsls	r2, r2, #23
 8002210:	4293      	cmp	r3, r2
 8002212:	d005      	beq.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002214:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d002      	beq.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d104      	bne.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002224:	684a      	ldr	r2, [r1, #4]
 8002226:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002228:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800222a:	2339      	movs	r3, #57	@ 0x39
 800222c:	2201      	movs	r2, #1
 800222e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002230:	2200      	movs	r2, #0
 8002232:	3b01      	subs	r3, #1
 8002234:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002236:	2000      	movs	r0, #0
}
 8002238:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800223a:	2002      	movs	r0, #2
 800223c:	e7fc      	b.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40010800 	.word	0x40010800
 8002244:	40011400 	.word	0x40011400

08002248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	4657      	mov	r7, sl
 800224c:	464e      	mov	r6, r9
 800224e:	4645      	mov	r5, r8
 8002250:	46de      	mov	lr, fp
 8002252:	b5e0      	push	{r5, r6, r7, lr}
 8002254:	001f      	movs	r7, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002256:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8002258:	0005      	movs	r5, r0
 800225a:	000e      	movs	r6, r1
 800225c:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800225e:	2b20      	cmp	r3, #32
 8002260:	d000      	beq.n	8002264 <HAL_UART_Transmit+0x1c>
 8002262:	e0a7      	b.n	80023b4 <HAL_UART_Transmit+0x16c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	2900      	cmp	r1, #0
 8002266:	d047      	beq.n	80022f8 <HAL_UART_Transmit+0xb0>
 8002268:	2a00      	cmp	r2, #0
 800226a:	d045      	beq.n	80022f8 <HAL_UART_Transmit+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	6882      	ldr	r2, [r0, #8]
 8002270:	015b      	lsls	r3, r3, #5
 8002272:	429a      	cmp	r2, r3
 8002274:	d104      	bne.n	8002280 <HAL_UART_Transmit+0x38>
 8002276:	6903      	ldr	r3, [r0, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800227c:	07cb      	lsls	r3, r1, #31
 800227e:	d43b      	bmi.n	80022f8 <HAL_UART_Transmit+0xb0>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002280:	2200      	movs	r2, #0
 8002282:	2384      	movs	r3, #132	@ 0x84
 8002284:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002286:	3b63      	subs	r3, #99	@ 0x63
 8002288:	67eb      	str	r3, [r5, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800228a:	f7fe fdc5 	bl	8000e18 <HAL_GetTick>

    huart->TxXferSize  = Size;
 800228e:	2350      	movs	r3, #80	@ 0x50
 8002290:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8002292:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8002294:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8002296:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 800229c:	4681      	mov	r9, r0
      pdata16bits = NULL;
 800229e:	468b      	mov	fp, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d100      	bne.n	80022a8 <HAL_UART_Transmit+0x60>
 80022a6:	e087      	b.n	80023b8 <HAL_UART_Transmit+0x170>
    }

    while (huart->TxXferCount > 0U)
 80022a8:	2352      	movs	r3, #82	@ 0x52
 80022aa:	5aeb      	ldrh	r3, [r5, r3]
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ac:	682a      	ldr	r2, [r5, #0]
    while (huart->TxXferCount > 0U)
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d017      	beq.n	80022e2 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 80022b2:	2352      	movs	r3, #82	@ 0x52
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b4:	2480      	movs	r4, #128	@ 0x80
      huart->TxXferCount--;
 80022b6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	469a      	mov	sl, r3
 80022bc:	1c7b      	adds	r3, r7, #1
 80022be:	d122      	bne.n	8002306 <HAL_UART_Transmit+0xbe>
 80022c0:	69d3      	ldr	r3, [r2, #28]
 80022c2:	421c      	tst	r4, r3
 80022c4:	d0fc      	beq.n	80022c0 <HAL_UART_Transmit+0x78>
      if (pdata8bits == NULL)
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	d06b      	beq.n	80023a2 <HAL_UART_Transmit+0x15a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ca:	7833      	ldrb	r3, [r6, #0]
        pdata8bits++;
 80022cc:	3601      	adds	r6, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80022d0:	4643      	mov	r3, r8
 80022d2:	4641      	mov	r1, r8
 80022d4:	5aeb      	ldrh	r3, [r5, r3]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29b      	uxth	r3, r3
 80022da:	526b      	strh	r3, [r5, r1]
    while (huart->TxXferCount > 0U)
 80022dc:	5a6b      	ldrh	r3, [r5, r1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ea      	bne.n	80022b8 <HAL_UART_Transmit+0x70>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e2:	2140      	movs	r1, #64	@ 0x40
 80022e4:	1c7b      	adds	r3, r7, #1
 80022e6:	d000      	beq.n	80022ea <HAL_UART_Transmit+0xa2>
 80022e8:	e09f      	b.n	800242a <HAL_UART_Transmit+0x1e2>
 80022ea:	69d3      	ldr	r3, [r2, #28]
 80022ec:	4219      	tst	r1, r3
 80022ee:	d0fc      	beq.n	80022ea <HAL_UART_Transmit+0xa2>
    huart->gState = HAL_UART_STATE_READY;
 80022f0:	2320      	movs	r3, #32
    return HAL_OK;
 80022f2:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80022f4:	67eb      	str	r3, [r5, #124]	@ 0x7c
    return HAL_OK;
 80022f6:	e000      	b.n	80022fa <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
}
 80022fa:	bcf0      	pop	{r4, r5, r6, r7}
 80022fc:	46bb      	mov	fp, r7
 80022fe:	46b2      	mov	sl, r6
 8002300:	46a9      	mov	r9, r5
 8002302:	46a0      	mov	r8, r4
 8002304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002306:	4651      	mov	r1, sl
 8002308:	69d3      	ldr	r3, [r2, #28]
 800230a:	4219      	tst	r1, r3
 800230c:	d1db      	bne.n	80022c6 <HAL_UART_Transmit+0x7e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe fd83 	bl	8000e18 <HAL_GetTick>
 8002312:	464b      	mov	r3, r9
 8002314:	1ac0      	subs	r0, r0, r3
 8002316:	4287      	cmp	r7, r0
 8002318:	d33f      	bcc.n	800239a <HAL_UART_Transmit+0x152>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d03d      	beq.n	800239a <HAL_UART_Transmit+0x152>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800231e:	2104      	movs	r1, #4
 8002320:	682a      	ldr	r2, [r5, #0]
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	4219      	tst	r1, r3
 8002326:	d0ee      	beq.n	8002306 <HAL_UART_Transmit+0xbe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002328:	69d3      	ldr	r3, [r2, #28]
 800232a:	3104      	adds	r1, #4
 800232c:	4219      	tst	r1, r3
 800232e:	d14a      	bne.n	80023c6 <HAL_UART_Transmit+0x17e>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	69d3      	ldr	r3, [r2, #28]
 8002334:	0109      	lsls	r1, r1, #4
 8002336:	420b      	tst	r3, r1
 8002338:	d0e5      	beq.n	8002306 <HAL_UART_Transmit+0xbe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800233a:	000b      	movs	r3, r1
 800233c:	6213      	str	r3, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	2201      	movs	r2, #1
 8002344:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002348:	6829      	ldr	r1, [r5, #0]
 800234a:	4c48      	ldr	r4, [pc, #288]	@ (800246c <HAL_UART_Transmit+0x224>)
 800234c:	680b      	ldr	r3, [r1, #0]
 800234e:	4023      	ands	r3, r4
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002356:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235e:	6829      	ldr	r1, [r5, #0]
 8002360:	688b      	ldr	r3, [r1, #8]
 8002362:	4393      	bics	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
 8002366:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10a      	bne.n	8002386 <HAL_UART_Transmit+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002370:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002378:	2010      	movs	r0, #16
 800237a:	682a      	ldr	r2, [r5, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	4383      	bics	r3, r0
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002386:	2220      	movs	r2, #32
 8002388:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800238a:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238e:	2300      	movs	r3, #0
 8002390:	662b      	str	r3, [r5, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002392:	66ab      	str	r3, [r5, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002394:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8002396:	3258      	adds	r2, #88	@ 0x58
 8002398:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 800239a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800239e:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80023a0:	e7ab      	b.n	80022fa <HAL_UART_Transmit+0xb2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a2:	465b      	mov	r3, fp
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	0ddb      	lsrs	r3, r3, #23
 80023aa:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 80023ac:	2302      	movs	r3, #2
 80023ae:	469c      	mov	ip, r3
 80023b0:	44e3      	add	fp, ip
      huart->TxXferCount--;
 80023b2:	e78d      	b.n	80022d0 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80023b4:	2002      	movs	r0, #2
 80023b6:	e7a0      	b.n	80022fa <HAL_UART_Transmit+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	692b      	ldr	r3, [r5, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d000      	beq.n	80023c0 <HAL_UART_Transmit+0x178>
 80023be:	e773      	b.n	80022a8 <HAL_UART_Transmit+0x60>
 80023c0:	46b3      	mov	fp, r6
      pdata8bits  = NULL;
 80023c2:	2600      	movs	r6, #0
 80023c4:	e770      	b.n	80022a8 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023c6:	2308      	movs	r3, #8
 80023c8:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ce:	2201      	movs	r2, #1
 80023d0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d4:	6829      	ldr	r1, [r5, #0]
 80023d6:	4c25      	ldr	r4, [pc, #148]	@ (800246c <HAL_UART_Transmit+0x224>)
 80023d8:	680b      	ldr	r3, [r1, #0]
 80023da:	4023      	ands	r3, r4
 80023dc:	600b      	str	r3, [r1, #0]
 80023de:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	6829      	ldr	r1, [r5, #0]
 80023ec:	688b      	ldr	r3, [r1, #8]
 80023ee:	4393      	bics	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
 80023f2:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10a      	bne.n	8002412 <HAL_UART_Transmit+0x1ca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002400:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002404:	2010      	movs	r0, #16
 8002406:	682a      	ldr	r2, [r5, #0]
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	4383      	bics	r3, r0
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002416:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241a:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800241c:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241e:	662b      	str	r3, [r5, #96]	@ 0x60
  huart->RxISR = NULL;
 8002420:	66ab      	str	r3, [r5, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002422:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8002424:	3a0c      	subs	r2, #12
 8002426:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8002428:	e7b7      	b.n	800239a <HAL_UART_Transmit+0x152>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800242a:	2304      	movs	r3, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242c:	2440      	movs	r4, #64	@ 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800242e:	4698      	mov	r8, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002430:	2608      	movs	r6, #8
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002432:	69d3      	ldr	r3, [r2, #28]
 8002434:	421c      	tst	r4, r3
 8002436:	d000      	beq.n	800243a <HAL_UART_Transmit+0x1f2>
 8002438:	e75a      	b.n	80022f0 <HAL_UART_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7fe fced 	bl	8000e18 <HAL_GetTick>
 800243e:	464b      	mov	r3, r9
 8002440:	1ac0      	subs	r0, r0, r3
 8002442:	4287      	cmp	r7, r0
 8002444:	d3a9      	bcc.n	800239a <HAL_UART_Transmit+0x152>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d0a7      	beq.n	800239a <HAL_UART_Transmit+0x152>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800244a:	4641      	mov	r1, r8
 800244c:	682a      	ldr	r2, [r5, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	4219      	tst	r1, r3
 8002452:	d0ee      	beq.n	8002432 <HAL_UART_Transmit+0x1ea>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002454:	69d3      	ldr	r3, [r2, #28]
 8002456:	421e      	tst	r6, r3
 8002458:	d105      	bne.n	8002466 <HAL_UART_Transmit+0x21e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	69d1      	ldr	r1, [r2, #28]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4219      	tst	r1, r3
 8002462:	d0e6      	beq.n	8002432 <HAL_UART_Transmit+0x1ea>
 8002464:	e76a      	b.n	800233c <HAL_UART_Transmit+0xf4>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002466:	6216      	str	r6, [r2, #32]
 8002468:	e7af      	b.n	80023ca <HAL_UART_Transmit+0x182>
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	fffffedf 	.word	0xfffffedf

08002470 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8002470:	4770      	bx	lr
 8002472:	46c0      	nop			@ (mov r8, r8)

08002474 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	225a      	movs	r2, #90	@ 0x5a
{
 8002478:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800247a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800247c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800247e:	3a08      	subs	r2, #8
 8002480:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002482:	f7ff fff5 	bl	8002470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002486:	bd10      	pop	{r4, pc}

08002488 <HAL_UARTEx_RxEventCallback>:
}
 8002488:	4770      	bx	lr
 800248a:	46c0      	nop			@ (mov r8, r8)

0800248c <HAL_UART_IRQHandler>:
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248e:	46d6      	mov	lr, sl
 8002490:	464f      	mov	r7, r9
 8002492:	4646      	mov	r6, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002494:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002496:	4dc0      	ldr	r5, [pc, #768]	@ (8002798 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002498:	69d3      	ldr	r3, [r2, #28]
{
 800249a:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249c:	6811      	ldr	r1, [r2, #0]
{
 800249e:	b5c0      	push	{r6, r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a0:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80024a2:	422b      	tst	r3, r5
 80024a4:	d151      	bne.n	800254a <HAL_UART_IRQHandler+0xbe>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024a6:	2520      	movs	r5, #32
 80024a8:	421d      	tst	r5, r3
 80024aa:	d002      	beq.n	80024b2 <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024ac:	420d      	tst	r5, r1
 80024ae:	d000      	beq.n	80024b2 <HAL_UART_IRQHandler+0x26>
 80024b0:	e0d3      	b.n	800265a <HAL_UART_IRQHandler+0x1ce>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b2:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80024b4:	2d01      	cmp	r5, #1
 80024b6:	d01c      	beq.n	80024f2 <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024b8:	2580      	movs	r5, #128	@ 0x80
 80024ba:	036d      	lsls	r5, r5, #13
 80024bc:	422b      	tst	r3, r5
 80024be:	d002      	beq.n	80024c6 <HAL_UART_IRQHandler+0x3a>
 80024c0:	0240      	lsls	r0, r0, #9
 80024c2:	d500      	bpl.n	80024c6 <HAL_UART_IRQHandler+0x3a>
 80024c4:	e0ce      	b.n	8002664 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	421a      	tst	r2, r3
 80024ca:	d10a      	bne.n	80024e2 <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	421a      	tst	r2, r3
 80024d0:	d002      	beq.n	80024d8 <HAL_UART_IRQHandler+0x4c>
 80024d2:	420a      	tst	r2, r1
 80024d4:	d000      	beq.n	80024d8 <HAL_UART_IRQHandler+0x4c>
 80024d6:	e0fe      	b.n	80026d6 <HAL_UART_IRQHandler+0x24a>
}
 80024d8:	bce0      	pop	{r5, r6, r7}
 80024da:	46ba      	mov	sl, r7
 80024dc:	46b1      	mov	r9, r6
 80024de:	46a8      	mov	r8, r5
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024e2:	420a      	tst	r2, r1
 80024e4:	d0f2      	beq.n	80024cc <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 80024e6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f5      	beq.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 80024ec:	0020      	movs	r0, r4
 80024ee:	4798      	blx	r3
 80024f0:	e7f2      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80024f2:	2610      	movs	r6, #16
 80024f4:	421e      	tst	r6, r3
 80024f6:	d0df      	beq.n	80024b8 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80024f8:	420e      	tst	r6, r1
 80024fa:	d0dd      	beq.n	80024b8 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	2340      	movs	r3, #64	@ 0x40
 80024fe:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002500:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	4010      	ands	r0, r2
 8002506:	4213      	tst	r3, r2
 8002508:	d100      	bne.n	800250c <HAL_UART_IRQHandler+0x80>
 800250a:	e10b      	b.n	8002724 <HAL_UART_IRQHandler+0x298>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800250c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800250e:	6810      	ldr	r0, [r2, #0]
 8002510:	6842      	ldr	r2, [r0, #4]
 8002512:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002514:	2a00      	cmp	r2, #0
 8002516:	d0df      	beq.n	80024d8 <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002518:	2158      	movs	r1, #88	@ 0x58
 800251a:	468a      	mov	sl, r1
 800251c:	5a61      	ldrh	r1, [r4, r1]
 800251e:	4291      	cmp	r1, r2
 8002520:	d9da      	bls.n	80024d8 <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8002522:	275a      	movs	r7, #90	@ 0x5a
 8002524:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002526:	2220      	movs	r2, #32
 8002528:	0017      	movs	r7, r2
 800252a:	6800      	ldr	r0, [r0, #0]
 800252c:	4007      	ands	r7, r0
 800252e:	46bc      	mov	ip, r7
 8002530:	4202      	tst	r2, r0
 8002532:	d100      	bne.n	8002536 <HAL_UART_IRQHandler+0xaa>
 8002534:	e13d      	b.n	80027b2 <HAL_UART_IRQHandler+0x326>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002536:	2302      	movs	r3, #2
 8002538:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800253a:	3358      	adds	r3, #88	@ 0x58
 800253c:	5ae3      	ldrh	r3, [r4, r3]
 800253e:	0020      	movs	r0, r4
 8002540:	1ac9      	subs	r1, r1, r3
 8002542:	b289      	uxth	r1, r1
 8002544:	f7ff ffa0 	bl	8002488 <HAL_UARTEx_RxEventCallback>
 8002548:	e7c6      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800254a:	2501      	movs	r5, #1
 800254c:	002f      	movs	r7, r5
 800254e:	4007      	ands	r7, r0
 8002550:	4205      	tst	r5, r0
 8002552:	d000      	beq.n	8002556 <HAL_UART_IRQHandler+0xca>
 8002554:	e0a5      	b.n	80026a2 <HAL_UART_IRQHandler+0x216>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002556:	4e91      	ldr	r6, [pc, #580]	@ (800279c <HAL_UART_IRQHandler+0x310>)
 8002558:	4231      	tst	r1, r6
 800255a:	d0aa      	beq.n	80024b2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800255c:	421d      	tst	r5, r3
 800255e:	d00e      	beq.n	800257e <HAL_UART_IRQHandler+0xf2>
 8002560:	05c8      	lsls	r0, r1, #23
 8002562:	d400      	bmi.n	8002566 <HAL_UART_IRQHandler+0xda>
 8002564:	e0da      	b.n	800271c <HAL_UART_IRQHandler+0x290>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002566:	2601      	movs	r6, #1
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002568:	2584      	movs	r5, #132	@ 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800256a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256c:	5960      	ldr	r0, [r4, r5]
 800256e:	4330      	orrs	r0, r6
 8002570:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002572:	0798      	lsls	r0, r3, #30
 8002574:	d400      	bmi.n	8002578 <HAL_UART_IRQHandler+0xec>
 8002576:	e07f      	b.n	8002678 <HAL_UART_IRQHandler+0x1ec>
 8002578:	2f00      	cmp	r7, #0
 800257a:	d000      	beq.n	800257e <HAL_UART_IRQHandler+0xf2>
 800257c:	e095      	b.n	80026aa <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800257e:	0758      	lsls	r0, r3, #29
 8002580:	d400      	bmi.n	8002584 <HAL_UART_IRQHandler+0xf8>
 8002582:	e09b      	b.n	80026bc <HAL_UART_IRQHandler+0x230>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002584:	0718      	lsls	r0, r3, #28
 8002586:	d500      	bpl.n	800258a <HAL_UART_IRQHandler+0xfe>
 8002588:	e0bd      	b.n	8002706 <HAL_UART_IRQHandler+0x27a>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800258a:	2080      	movs	r0, #128	@ 0x80
 800258c:	0100      	lsls	r0, r0, #4
 800258e:	4203      	tst	r3, r0
 8002590:	d007      	beq.n	80025a2 <HAL_UART_IRQHandler+0x116>
 8002592:	014d      	lsls	r5, r1, #5
 8002594:	d505      	bpl.n	80025a2 <HAL_UART_IRQHandler+0x116>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002596:	2584      	movs	r5, #132	@ 0x84
 8002598:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800259a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800259c:	5960      	ldr	r0, [r4, r5]
 800259e:	4330      	orrs	r0, r6
 80025a0:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025a2:	2084      	movs	r0, #132	@ 0x84
 80025a4:	5820      	ldr	r0, [r4, r0]
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d096      	beq.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025aa:	2020      	movs	r0, #32
 80025ac:	4218      	tst	r0, r3
 80025ae:	d002      	beq.n	80025b6 <HAL_UART_IRQHandler+0x12a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025b0:	4208      	tst	r0, r1
 80025b2:	d000      	beq.n	80025b6 <HAL_UART_IRQHandler+0x12a>
 80025b4:	e0aa      	b.n	800270c <HAL_UART_IRQHandler+0x280>
      errorcode = huart->ErrorCode;
 80025b6:	2684      	movs	r6, #132	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b8:	2540      	movs	r5, #64	@ 0x40
      errorcode = huart->ErrorCode;
 80025ba:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025bc:	6893      	ldr	r3, [r2, #8]
 80025be:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025c0:	2328      	movs	r3, #40	@ 0x28
 80025c2:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c4:	431d      	orrs	r5, r3
 80025c6:	d100      	bne.n	80025ca <HAL_UART_IRQHandler+0x13e>
 80025c8:	e0ee      	b.n	80027a8 <HAL_UART_IRQHandler+0x31c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ce:	2201      	movs	r2, #1
 80025d0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d4:	6821      	ldr	r1, [r4, #0]
 80025d6:	4d72      	ldr	r5, [pc, #456]	@ (80027a0 <HAL_UART_IRQHandler+0x314>)
 80025d8:	680b      	ldr	r3, [r1, #0]
 80025da:	402b      	ands	r3, r5
 80025dc:	600b      	str	r3, [r1, #0]
 80025de:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ea:	6821      	ldr	r1, [r4, #0]
 80025ec:	688b      	ldr	r3, [r1, #8]
 80025ee:	4393      	bics	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10a      	bne.n	8002612 <HAL_UART_IRQHandler+0x186>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002600:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002604:	2010      	movs	r0, #16
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	4383      	bics	r3, r0
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	2220      	movs	r2, #32
 8002616:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	2300      	movs	r3, #0
 800261a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 800261c:	66a3      	str	r3, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	3220      	adds	r2, #32
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	421a      	tst	r2, r3
 8002626:	d052      	beq.n	80026ce <HAL_UART_IRQHandler+0x242>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002628:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	2301      	movs	r3, #1
 800262e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002632:	6821      	ldr	r1, [r4, #0]
 8002634:	688b      	ldr	r3, [r1, #8]
 8002636:	4393      	bics	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
 800263a:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 800263e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002640:	2800      	cmp	r0, #0
 8002642:	d044      	beq.n	80026ce <HAL_UART_IRQHandler+0x242>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002644:	4b57      	ldr	r3, [pc, #348]	@ (80027a4 <HAL_UART_IRQHandler+0x318>)
 8002646:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002648:	f7fe fc6e 	bl	8000f28 <HAL_DMA_Abort_IT>
 800264c:	2800      	cmp	r0, #0
 800264e:	d100      	bne.n	8002652 <HAL_UART_IRQHandler+0x1c6>
 8002650:	e742      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002652:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002654:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002656:	4798      	blx	r3
 8002658:	e73e      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      if (huart->RxISR != NULL)
 800265a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800265c:	2b00      	cmp	r3, #0
 800265e:	d000      	beq.n	8002662 <HAL_UART_IRQHandler+0x1d6>
 8002660:	e744      	b.n	80024ec <HAL_UART_IRQHandler+0x60>
 8002662:	e739      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
    HAL_UARTEx_WakeupCallback(huart);
 8002664:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002666:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002668:	f000 fbc4 	bl	8002df4 <HAL_UARTEx_WakeupCallback>
    return;
 800266c:	e734      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800266e:	05c8      	lsls	r0, r1, #23
 8002670:	d500      	bpl.n	8002674 <HAL_UART_IRQHandler+0x1e8>
 8002672:	e778      	b.n	8002566 <HAL_UART_IRQHandler+0xda>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002674:	0798      	lsls	r0, r3, #30
 8002676:	d418      	bmi.n	80026aa <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002678:	0758      	lsls	r0, r3, #29
 800267a:	d51f      	bpl.n	80026bc <HAL_UART_IRQHandler+0x230>
 800267c:	2f00      	cmp	r7, #0
 800267e:	d081      	beq.n	8002584 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002680:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002682:	2584      	movs	r5, #132	@ 0x84
 8002684:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002686:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002688:	5960      	ldr	r0, [r4, r5]
 800268a:	4330      	orrs	r0, r6
 800268c:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800268e:	0718      	lsls	r0, r3, #28
 8002690:	d400      	bmi.n	8002694 <HAL_UART_IRQHandler+0x208>
 8002692:	e77a      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002694:	2608      	movs	r6, #8
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002696:	2584      	movs	r5, #132	@ 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002698:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269a:	5960      	ldr	r0, [r4, r5]
 800269c:	4330      	orrs	r0, r6
 800269e:	5160      	str	r0, [r4, r5]
 80026a0:	e773      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026a2:	421d      	tst	r5, r3
 80026a4:	d1e3      	bne.n	800266e <HAL_UART_IRQHandler+0x1e2>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026a6:	0798      	lsls	r0, r3, #30
 80026a8:	d528      	bpl.n	80026fc <HAL_UART_IRQHandler+0x270>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026aa:	2002      	movs	r0, #2
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ac:	2684      	movs	r6, #132	@ 0x84
 80026ae:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026b0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026b2:	59a0      	ldr	r0, [r4, r6]
 80026b4:	4328      	orrs	r0, r5
 80026b6:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026b8:	421d      	tst	r5, r3
 80026ba:	d1e1      	bne.n	8002680 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026bc:	0718      	lsls	r0, r3, #28
 80026be:	d400      	bmi.n	80026c2 <HAL_UART_IRQHandler+0x236>
 80026c0:	e763      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026c2:	2020      	movs	r0, #32
 80026c4:	4008      	ands	r0, r1
 80026c6:	4338      	orrs	r0, r7
 80026c8:	d100      	bne.n	80026cc <HAL_UART_IRQHandler+0x240>
 80026ca:	e75e      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
 80026cc:	e7e2      	b.n	8002694 <HAL_UART_IRQHandler+0x208>
            HAL_UART_ErrorCallback(huart);
 80026ce:	0020      	movs	r0, r4
 80026d0:	f7ff fece 	bl	8002470 <HAL_UART_ErrorCallback>
 80026d4:	e700      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	2301      	movs	r3, #1
 80026dc:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026e0:	6821      	ldr	r1, [r4, #0]
 80026e2:	680b      	ldr	r3, [r1, #0]
 80026e4:	4393      	bics	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	2320      	movs	r3, #32
 80026ee:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80026f0:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026f2:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80026f4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 80026f6:	f7fe faed 	bl	8000cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026fa:	e6ed      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026fc:	0758      	lsls	r0, r3, #29
 80026fe:	d4bf      	bmi.n	8002680 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002700:	0718      	lsls	r0, r3, #28
 8002702:	d4c7      	bmi.n	8002694 <HAL_UART_IRQHandler+0x208>
 8002704:	e741      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002706:	0688      	lsls	r0, r1, #26
 8002708:	d4c4      	bmi.n	8002694 <HAL_UART_IRQHandler+0x208>
 800270a:	e73e      	b.n	800258a <HAL_UART_IRQHandler+0xfe>
        if (huart->RxISR != NULL)
 800270c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800270e:	2b00      	cmp	r3, #0
 8002710:	d100      	bne.n	8002714 <HAL_UART_IRQHandler+0x288>
 8002712:	e750      	b.n	80025b6 <HAL_UART_IRQHandler+0x12a>
          huart->RxISR(huart);
 8002714:	0020      	movs	r0, r4
 8002716:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	e74c      	b.n	80025b6 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800271c:	0798      	lsls	r0, r3, #30
 800271e:	d500      	bpl.n	8002722 <HAL_UART_IRQHandler+0x296>
 8002720:	e72d      	b.n	800257e <HAL_UART_IRQHandler+0xf2>
 8002722:	e7a9      	b.n	8002678 <HAL_UART_IRQHandler+0x1ec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002724:	2358      	movs	r3, #88	@ 0x58
 8002726:	225a      	movs	r2, #90	@ 0x5a
 8002728:	5ae1      	ldrh	r1, [r4, r3]
 800272a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800272c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800272e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002730:	2a00      	cmp	r2, #0
 8002732:	d100      	bne.n	8002736 <HAL_UART_IRQHandler+0x2aa>
 8002734:	e6d0      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002736:	1ac9      	subs	r1, r1, r3
 8002738:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800273a:	2900      	cmp	r1, #0
 800273c:	d100      	bne.n	8002740 <HAL_UART_IRQHandler+0x2b4>
 800273e:	e6cb      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	4698      	mov	r8, r3
 800274e:	4647      	mov	r7, r8
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_UART_IRQHandler+0x314>)
 8002752:	401f      	ands	r7, r3
 8002754:	6017      	str	r7, [r2, #0]
 8002756:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275e:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002762:	6822      	ldr	r2, [r4, #0]
 8002764:	6893      	ldr	r3, [r2, #8]
 8002766:	43ab      	bics	r3, r5
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	2220      	movs	r2, #32
 8002772:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002774:	6620      	str	r0, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8002776:	66a0      	str	r0, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002778:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	43b3      	bics	r3, r6
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800278c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800278e:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002790:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002792:	f7ff fe79 	bl	8002488 <HAL_UARTEx_RxEventCallback>
 8002796:	e69f      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
 8002798:	0000080f 	.word	0x0000080f
 800279c:	04000120 	.word	0x04000120
 80027a0:	fffffedf 	.word	0xfffffedf
 80027a4:	08002475 	.word	0x08002475
        HAL_UART_ErrorCallback(huart);
 80027a8:	0020      	movs	r0, r4
 80027aa:	f7ff fe61 	bl	8002470 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ae:	51a5      	str	r5, [r4, r6]
 80027b0:	e692      	b.n	80024d8 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	4f16      	ldr	r7, [pc, #88]	@ (8002818 <HAL_UART_IRQHandler+0x38c>)
 80027be:	6801      	ldr	r1, [r0, #0]
 80027c0:	4039      	ands	r1, r7
 80027c2:	6001      	str	r1, [r0, #0]
 80027c4:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	6881      	ldr	r1, [r0, #8]
 80027d4:	43a9      	bics	r1, r5
 80027d6:	6081      	str	r1, [r0, #8]
 80027d8:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027dc:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	6881      	ldr	r1, [r0, #8]
 80027e8:	4399      	bics	r1, r3
 80027ea:	6081      	str	r1, [r0, #8]
 80027ec:	f388 8810 	msr	PRIMASK, r8
          huart->RxState = HAL_UART_STATE_READY;
 80027f0:	3340      	adds	r3, #64	@ 0x40
 80027f2:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f4:	4663      	mov	r3, ip
 80027f6:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	43b3      	bics	r3, r6
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800280c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800280e:	f7fe fb6b 	bl	8000ee8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002812:	4653      	mov	r3, sl
 8002814:	5ae1      	ldrh	r1, [r4, r3]
 8002816:	e68e      	b.n	8002536 <HAL_UART_IRQHandler+0xaa>
 8002818:	fffffeff 	.word	0xfffffeff

0800281c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800281c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800281e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002820:	07da      	lsls	r2, r3, #31
 8002822:	d506      	bpl.n	8002832 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002824:	6801      	ldr	r1, [r0, #0]
 8002826:	4c28      	ldr	r4, [pc, #160]	@ (80028c8 <UART_AdvFeatureConfig+0xac>)
 8002828:	684a      	ldr	r2, [r1, #4]
 800282a:	4022      	ands	r2, r4
 800282c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800282e:	4322      	orrs	r2, r4
 8002830:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002832:	079a      	lsls	r2, r3, #30
 8002834:	d506      	bpl.n	8002844 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002836:	6801      	ldr	r1, [r0, #0]
 8002838:	4c24      	ldr	r4, [pc, #144]	@ (80028cc <UART_AdvFeatureConfig+0xb0>)
 800283a:	684a      	ldr	r2, [r1, #4]
 800283c:	4022      	ands	r2, r4
 800283e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002840:	4322      	orrs	r2, r4
 8002842:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002844:	075a      	lsls	r2, r3, #29
 8002846:	d506      	bpl.n	8002856 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002848:	6801      	ldr	r1, [r0, #0]
 800284a:	4c21      	ldr	r4, [pc, #132]	@ (80028d0 <UART_AdvFeatureConfig+0xb4>)
 800284c:	684a      	ldr	r2, [r1, #4]
 800284e:	4022      	ands	r2, r4
 8002850:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002852:	4322      	orrs	r2, r4
 8002854:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002856:	071a      	lsls	r2, r3, #28
 8002858:	d506      	bpl.n	8002868 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800285a:	6801      	ldr	r1, [r0, #0]
 800285c:	4c1d      	ldr	r4, [pc, #116]	@ (80028d4 <UART_AdvFeatureConfig+0xb8>)
 800285e:	684a      	ldr	r2, [r1, #4]
 8002860:	4022      	ands	r2, r4
 8002862:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002864:	4322      	orrs	r2, r4
 8002866:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002868:	06da      	lsls	r2, r3, #27
 800286a:	d506      	bpl.n	800287a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800286c:	6801      	ldr	r1, [r0, #0]
 800286e:	4c1a      	ldr	r4, [pc, #104]	@ (80028d8 <UART_AdvFeatureConfig+0xbc>)
 8002870:	688a      	ldr	r2, [r1, #8]
 8002872:	4022      	ands	r2, r4
 8002874:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002876:	4322      	orrs	r2, r4
 8002878:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800287a:	069a      	lsls	r2, r3, #26
 800287c:	d506      	bpl.n	800288c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800287e:	6801      	ldr	r1, [r0, #0]
 8002880:	4c16      	ldr	r4, [pc, #88]	@ (80028dc <UART_AdvFeatureConfig+0xc0>)
 8002882:	688a      	ldr	r2, [r1, #8]
 8002884:	4022      	ands	r2, r4
 8002886:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002888:	4322      	orrs	r2, r4
 800288a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800288c:	065a      	lsls	r2, r3, #25
 800288e:	d50a      	bpl.n	80028a6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002890:	6801      	ldr	r1, [r0, #0]
 8002892:	4d13      	ldr	r5, [pc, #76]	@ (80028e0 <UART_AdvFeatureConfig+0xc4>)
 8002894:	684a      	ldr	r2, [r1, #4]
 8002896:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002898:	402a      	ands	r2, r5
 800289a:	4322      	orrs	r2, r4
 800289c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	0352      	lsls	r2, r2, #13
 80028a2:	4294      	cmp	r4, r2
 80028a4:	d009      	beq.n	80028ba <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	d506      	bpl.n	80028b8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028aa:	6802      	ldr	r2, [r0, #0]
 80028ac:	490d      	ldr	r1, [pc, #52]	@ (80028e4 <UART_AdvFeatureConfig+0xc8>)
 80028ae:	6853      	ldr	r3, [r2, #4]
 80028b0:	400b      	ands	r3, r1
 80028b2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6053      	str	r3, [r2, #4]
}
 80028b8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ba:	684a      	ldr	r2, [r1, #4]
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <UART_AdvFeatureConfig+0xcc>)
 80028be:	4022      	ands	r2, r4
 80028c0:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80028c2:	4322      	orrs	r2, r4
 80028c4:	604a      	str	r2, [r1, #4]
 80028c6:	e7ee      	b.n	80028a6 <UART_AdvFeatureConfig+0x8a>
 80028c8:	fffdffff 	.word	0xfffdffff
 80028cc:	fffeffff 	.word	0xfffeffff
 80028d0:	fffbffff 	.word	0xfffbffff
 80028d4:	ffff7fff 	.word	0xffff7fff
 80028d8:	ffffefff 	.word	0xffffefff
 80028dc:	ffffdfff 	.word	0xffffdfff
 80028e0:	ffefffff 	.word	0xffefffff
 80028e4:	fff7ffff 	.word	0xfff7ffff
 80028e8:	ff9fffff 	.word	0xff9fffff

080028ec <UART_CheckIdleState>:
{
 80028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	2384      	movs	r3, #132	@ 0x84
 80028f0:	2200      	movs	r2, #0
{
 80028f2:	46c6      	mov	lr, r8
 80028f4:	0004      	movs	r4, r0
 80028f6:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80028fa:	f7fe fa8d 	bl	8000e18 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028fe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002900:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	0712      	lsls	r2, r2, #28
 8002906:	d410      	bmi.n	800292a <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	0752      	lsls	r2, r2, #29
 800290c:	d43c      	bmi.n	8002988 <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 800290e:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	2280      	movs	r2, #128	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8002912:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002914:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	2300      	movs	r3, #0
  return HAL_OK;
 8002918:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800291c:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800291e:	2378      	movs	r3, #120	@ 0x78
 8002920:	2200      	movs	r2, #0
 8002922:	54e2      	strb	r2, [r4, r3]
}
 8002924:	bc80      	pop	{r7}
 8002926:	46b8      	mov	r8, r7
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	0292      	lsls	r2, r2, #10
 800292e:	d4eb      	bmi.n	8002908 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002932:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002934:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002936:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	04b6      	lsls	r6, r6, #18
 800293a:	e010      	b.n	800295e <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4217      	tst	r7, r2
 8002942:	d009      	beq.n	8002958 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002944:	4641      	mov	r1, r8
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	4211      	tst	r1, r2
 800294a:	d158      	bne.n	80029fe <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	4211      	tst	r1, r2
 8002954:	d000      	beq.n	8002958 <UART_CheckIdleState+0x6c>
 8002956:	e083      	b.n	8002a60 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	0292      	lsls	r2, r2, #10
 800295c:	d4d4      	bmi.n	8002908 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe fa5b 	bl	8000e18 <HAL_GetTick>
 8002962:	1b40      	subs	r0, r0, r5
 8002964:	42b0      	cmp	r0, r6
 8002966:	d3e9      	bcc.n	800293c <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	2301      	movs	r3, #1
 800296e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002972:	2080      	movs	r0, #128	@ 0x80
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	6813      	ldr	r3, [r2, #0]
 8002978:	4383      	bics	r3, r0
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002980:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002982:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8002984:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002986:	e7ca      	b.n	800291e <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	d4bf      	bmi.n	800290e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002990:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002992:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002994:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	04b6      	lsls	r6, r6, #18
 8002998:	e011      	b.n	80029be <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4217      	tst	r7, r2
 80029a0:	d00a      	beq.n	80029b8 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029a2:	4641      	mov	r1, r8
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	4211      	tst	r1, r2
 80029a8:	d000      	beq.n	80029ac <UART_CheckIdleState+0xc0>
 80029aa:	e089      	b.n	8002ac0 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	69d9      	ldr	r1, [r3, #28]
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	4211      	tst	r1, r2
 80029b4:	d000      	beq.n	80029b8 <UART_CheckIdleState+0xcc>
 80029b6:	e0b4      	b.n	8002b22 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	d4a7      	bmi.n	800290e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fa2b 	bl	8000e18 <HAL_GetTick>
 80029c2:	1b40      	subs	r0, r0, r5
 80029c4:	42b0      	cmp	r0, r6
 80029c6:	d3e8      	bcc.n	800299a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029cc:	2201      	movs	r2, #1
 80029ce:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d2:	6821      	ldr	r1, [r4, #0]
 80029d4:	4d6b      	ldr	r5, [pc, #428]	@ (8002b84 <UART_CheckIdleState+0x298>)
 80029d6:	680b      	ldr	r3, [r1, #0]
 80029d8:	402b      	ands	r3, r5
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e8:	6821      	ldr	r1, [r4, #0]
 80029ea:	688b      	ldr	r3, [r1, #8]
 80029ec:	4393      	bics	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
 80029f0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80029f8:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80029fa:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80029fc:	e78f      	b.n	800291e <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029fe:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	2201      	movs	r2, #1
 8002a06:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0a:	6821      	ldr	r1, [r4, #0]
 8002a0c:	4d5d      	ldr	r5, [pc, #372]	@ (8002b84 <UART_CheckIdleState+0x298>)
 8002a0e:	680b      	ldr	r3, [r1, #0]
 8002a10:	402b      	ands	r3, r5
 8002a12:	600b      	str	r3, [r1, #0]
 8002a14:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a20:	6821      	ldr	r1, [r4, #0]
 8002a22:	688b      	ldr	r3, [r1, #8]
 8002a24:	4393      	bics	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
 8002a28:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10a      	bne.n	8002a48 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3a:	2010      	movs	r0, #16
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	4383      	bics	r3, r0
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a4c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002a4e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a50:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a52:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8002a56:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a58:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8002a5a:	3a0c      	subs	r2, #12
 8002a5c:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8002a5e:	e783      	b.n	8002968 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	2201      	movs	r2, #1
 8002a68:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6c:	6821      	ldr	r1, [r4, #0]
 8002a6e:	4d45      	ldr	r5, [pc, #276]	@ (8002b84 <UART_CheckIdleState+0x298>)
 8002a70:	680b      	ldr	r3, [r1, #0]
 8002a72:	402b      	ands	r3, r5
 8002a74:	600b      	str	r3, [r1, #0]
 8002a76:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a82:	6821      	ldr	r1, [r4, #0]
 8002a84:	688b      	ldr	r3, [r1, #8]
 8002a86:	4393      	bics	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
 8002a8a:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10a      	bne.n	8002aaa <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9c:	2010      	movs	r0, #16
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	4383      	bics	r3, r0
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	2220      	movs	r2, #32
 8002aac:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aae:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8002ab6:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ab8:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002aba:	3258      	adds	r2, #88	@ 0x58
 8002abc:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002abe:	e753      	b.n	8002968 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ac0:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002acc:	6821      	ldr	r1, [r4, #0]
 8002ace:	4d2d      	ldr	r5, [pc, #180]	@ (8002b84 <UART_CheckIdleState+0x298>)
 8002ad0:	680b      	ldr	r3, [r1, #0]
 8002ad2:	402b      	ands	r3, r5
 8002ad4:	600b      	str	r3, [r1, #0]
 8002ad6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ada:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	6821      	ldr	r1, [r4, #0]
 8002ae4:	688b      	ldr	r3, [r1, #8]
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
 8002aea:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aee:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10a      	bne.n	8002b0a <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afc:	2010      	movs	r0, #16
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	4383      	bics	r3, r0
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b0e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b14:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8002b18:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b1a:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8002b1c:	3a0c      	subs	r2, #12
 8002b1e:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8002b20:	e752      	b.n	80029c8 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b22:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	4d14      	ldr	r5, [pc, #80]	@ (8002b84 <UART_CheckIdleState+0x298>)
 8002b32:	680b      	ldr	r3, [r1, #0]
 8002b34:	402b      	ands	r3, r5
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b40:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	6821      	ldr	r1, [r4, #0]
 8002b46:	688b      	ldr	r3, [r1, #8]
 8002b48:	4393      	bics	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
 8002b4c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b50:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10a      	bne.n	8002b6c <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5e:	2010      	movs	r0, #16
 8002b60:	6822      	ldr	r2, [r4, #0]
 8002b62:	6813      	ldr	r3, [r2, #0]
 8002b64:	4383      	bics	r3, r0
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b70:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002b72:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b74:	2300      	movs	r3, #0
 8002b76:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8002b78:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b7a:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002b7c:	3258      	adds	r2, #88	@ 0x58
 8002b7e:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002b80:	e722      	b.n	80029c8 <UART_CheckIdleState+0xdc>
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	fffffedf 	.word	0xfffffedf

08002b88 <HAL_UART_Init>:
{
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002b8c:	d100      	bne.n	8002b90 <HAL_UART_Init+0x8>
 8002b8e:	e08f      	b.n	8002cb0 <HAL_UART_Init+0x128>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b90:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d100      	bne.n	8002b98 <HAL_UART_Init+0x10>
 8002b96:	e08d      	b.n	8002cb4 <HAL_UART_Init+0x12c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b98:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002b9a:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002b9e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba0:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002baa:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bac:	432a      	orrs	r2, r5
 8002bae:	6965      	ldr	r5, [r4, #20]
 8002bb0:	69e1      	ldr	r1, [r4, #28]
 8002bb2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb4:	4d7f      	ldr	r5, [pc, #508]	@ (8002db4 <HAL_UART_Init+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bb6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb8:	4028      	ands	r0, r5
 8002bba:	4302      	orrs	r2, r0
 8002bbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	487d      	ldr	r0, [pc, #500]	@ (8002db8 <HAL_UART_Init+0x230>)
 8002bc2:	4002      	ands	r2, r0
 8002bc4:	68e0      	ldr	r0, [r4, #12]
 8002bc6:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc8:	487c      	ldr	r0, [pc, #496]	@ (8002dbc <HAL_UART_Init+0x234>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bca:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bcc:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bce:	4283      	cmp	r3, r0
 8002bd0:	d05a      	beq.n	8002c88 <HAL_UART_Init+0x100>
    tmpreg |= huart->Init.OneBitSampling;
 8002bd2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd4:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002bd6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd8:	4d79      	ldr	r5, [pc, #484]	@ (8002dc0 <HAL_UART_Init+0x238>)
 8002bda:	4028      	ands	r0, r5
 8002bdc:	4302      	orrs	r2, r0
 8002bde:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be0:	4a78      	ldr	r2, [pc, #480]	@ (8002dc4 <HAL_UART_Init+0x23c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <HAL_UART_Init+0x86>
 8002be6:	4b78      	ldr	r3, [pc, #480]	@ (8002dc8 <HAL_UART_Init+0x240>)
 8002be8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bea:	2303      	movs	r3, #3
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_UART_Init+0x6c>
 8002bf2:	e08c      	b.n	8002d0e <HAL_UART_Init+0x186>
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d100      	bne.n	8002bfa <HAL_UART_Init+0x72>
 8002bf8:	e099      	b.n	8002d2e <HAL_UART_Init+0x1a6>
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d018      	beq.n	8002c30 <HAL_UART_Init+0xa8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4299      	cmp	r1, r3
 8002c04:	d100      	bne.n	8002c08 <HAL_UART_Init+0x80>
 8002c06:	e0b7      	b.n	8002d78 <HAL_UART_Init+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7fe ff12 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
        break;
 8002c0c:	e017      	b.n	8002c3e <HAL_UART_Init+0xb6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dcc <HAL_UART_Init+0x244>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d14a      	bne.n	8002caa <HAL_UART_Init+0x122>
 8002c14:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc8 <HAL_UART_Init+0x240>)
 8002c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c18:	230c      	movs	r3, #12
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d100      	bne.n	8002c22 <HAL_UART_Init+0x9a>
 8002c20:	e075      	b.n	8002d0e <HAL_UART_Init+0x186>
 8002c22:	d900      	bls.n	8002c26 <HAL_UART_Init+0x9e>
 8002c24:	e081      	b.n	8002d2a <HAL_UART_Init+0x1a2>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d100      	bne.n	8002c2c <HAL_UART_Init+0xa4>
 8002c2a:	e0b8      	b.n	8002d9e <HAL_UART_Init+0x216>
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d13c      	bne.n	8002caa <HAL_UART_Init+0x122>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	4299      	cmp	r1, r3
 8002c36:	d100      	bne.n	8002c3a <HAL_UART_Init+0xb2>
 8002c38:	e0a4      	b.n	8002d84 <HAL_UART_Init+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7fe faf1 	bl	8001220 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_Init+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c42:	6861      	ldr	r1, [r4, #4]
 8002c44:	084b      	lsrs	r3, r1, #1
 8002c46:	1818      	adds	r0, r3, r0
 8002c48:	f7fd fa70 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_UART_Init+0x248>)
 8002c50:	3a10      	subs	r2, #16
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d829      	bhi.n	8002caa <HAL_UART_Init+0x122>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c5e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <HAL_UART_Init+0x14c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	495a      	ldr	r1, [pc, #360]	@ (8002dd4 <HAL_UART_Init+0x24c>)
 8002c6a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002c6c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c70:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	438a      	bics	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	3929      	subs	r1, #41	@ 0x29
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c82:	f7ff fe33 	bl	80028ec <UART_CheckIdleState>
}
 8002c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	484d      	ldr	r0, [pc, #308]	@ (8002dc0 <HAL_UART_Init+0x238>)
 8002c8c:	4001      	ands	r1, r0
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c92:	22c0      	movs	r2, #192	@ 0xc0
 8002c94:	2180      	movs	r1, #128	@ 0x80
 8002c96:	484c      	ldr	r0, [pc, #304]	@ (8002dc8 <HAL_UART_Init+0x240>)
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002c9c:	0109      	lsls	r1, r1, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	d060      	beq.n	8002d66 <HAL_UART_Init+0x1de>
 8002ca4:	d90b      	bls.n	8002cbe <HAL_UART_Init+0x136>
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_UART_Init+0x154>
  huart->RxISR = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cae:	66e3      	str	r3, [r4, #108]	@ 0x6c
    return HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	e7e8      	b.n	8002c86 <HAL_UART_Init+0xfe>
    huart->Lock = HAL_UNLOCKED;
 8002cb4:	2278      	movs	r2, #120	@ 0x78
 8002cb6:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002cb8:	f7fd ff1a 	bl	8000af0 <HAL_UART_MspInit>
 8002cbc:	e76c      	b.n	8002b98 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04e      	beq.n	8002d60 <HAL_UART_Init+0x1d8>
 8002cc2:	2280      	movs	r2, #128	@ 0x80
 8002cc4:	00d2      	lsls	r2, r2, #3
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d1ef      	bne.n	8002caa <HAL_UART_Init+0x122>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cca:	f7fe faa9 	bl	8001220 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d0c3      	beq.n	8002c5a <HAL_UART_Init+0xd2>
 8002cd2:	e005      	b.n	8002ce0 <HAL_UART_Init+0x158>
    UART_AdvFeatureConfig(huart);
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	f7ff fda1 	bl	800281c <UART_AdvFeatureConfig>
 8002cda:	e7c4      	b.n	8002c66 <HAL_UART_Init+0xde>
        pclk = (uint32_t) LSE_VALUE;
 8002cdc:	2080      	movs	r0, #128	@ 0x80
 8002cde:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ce0:	6862      	ldr	r2, [r4, #4]
 8002ce2:	0053      	lsls	r3, r2, #1
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	4283      	cmp	r3, r0
 8002ce8:	d8df      	bhi.n	8002caa <HAL_UART_Init+0x122>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cea:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d8dc      	bhi.n	8002caa <HAL_UART_Init+0x122>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	0e07      	lsrs	r7, r0, #24
 8002cf4:	0206      	lsls	r6, r0, #8
 8002cf6:	0850      	lsrs	r0, r2, #1
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	1980      	adds	r0, r0, r6
 8002cfc:	4179      	adcs	r1, r7
 8002cfe:	f7fd faa1 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d02:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <HAL_UART_Init+0x250>)
 8002d04:	18c2      	adds	r2, r0, r3
 8002d06:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <HAL_UART_Init+0x254>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8ce      	bhi.n	8002caa <HAL_UART_Init+0x122>
 8002d0c:	e7a3      	b.n	8002c56 <HAL_UART_Init+0xce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4299      	cmp	r1, r3
 8002d14:	d039      	beq.n	8002d8a <HAL_UART_Init+0x202>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d16:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc8 <HAL_UART_Init+0x240>)
 8002d18:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 8002d1a:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_UART_Init+0x258>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d1c:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8002d1e:	17c0      	asrs	r0, r0, #31
 8002d20:	4018      	ands	r0, r3
 8002d22:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_UART_Init+0x25c>)
 8002d24:	469c      	mov	ip, r3
 8002d26:	4460      	add	r0, ip
 8002d28:	e78b      	b.n	8002c42 <HAL_UART_Init+0xba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d1bd      	bne.n	8002caa <HAL_UART_Init+0x122>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2e:	2080      	movs	r0, #128	@ 0x80
 8002d30:	0200      	lsls	r0, r0, #8
 8002d32:	4281      	cmp	r1, r0
 8002d34:	d000      	beq.n	8002d38 <HAL_UART_Init+0x1b0>
 8002d36:	e784      	b.n	8002c42 <HAL_UART_Init+0xba>
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d3c:	6861      	ldr	r1, [r4, #4]
 8002d3e:	0848      	lsrs	r0, r1, #1
 8002d40:	18c0      	adds	r0, r0, r3
 8002d42:	f7fd f9f3 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d46:	0002      	movs	r2, r0
 8002d48:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <HAL_UART_Init+0x248>)
 8002d4a:	3a10      	subs	r2, #16
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8ac      	bhi.n	8002caa <HAL_UART_Init+0x122>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_UART_Init+0x260>)
        huart->Instance->BRR = brrtemp;
 8002d52:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d54:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d56:	0700      	lsls	r0, r0, #28
 8002d58:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002d5a:	4303      	orrs	r3, r0
 8002d5c:	60d3      	str	r3, [r2, #12]
  return ret;
 8002d5e:	e77c      	b.n	8002c5a <HAL_UART_Init+0xd2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d60:	f7fe fe56 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
        break;
 8002d64:	e7b3      	b.n	8002cce <HAL_UART_Init+0x146>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d66:	6800      	ldr	r0, [r0, #0]
          pclk = (uint32_t) HSI_VALUE;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <HAL_UART_Init+0x258>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d6a:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8002d6c:	17c0      	asrs	r0, r0, #31
 8002d6e:	4018      	ands	r0, r3
 8002d70:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <HAL_UART_Init+0x25c>)
 8002d72:	469c      	mov	ip, r3
 8002d74:	4460      	add	r0, ip
 8002d76:	e7b3      	b.n	8002ce0 <HAL_UART_Init+0x158>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7fe fe5a 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7c:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d1dc      	bne.n	8002d3c <HAL_UART_Init+0x1b4>
 8002d82:	e76a      	b.n	8002c5a <HAL_UART_Init+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d84:	f7fe fa4c 	bl	8001220 <HAL_RCC_GetSysClockFreq>
        break;
 8002d88:	e7f8      	b.n	8002d7c <HAL_UART_Init+0x1f4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <HAL_UART_Init+0x240>)
 8002d8c:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_UART_Init+0x264>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	06db      	lsls	r3, r3, #27
 8002d92:	17db      	asrs	r3, r3, #31
 8002d94:	4013      	ands	r3, r2
 8002d96:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <HAL_UART_Init+0x268>)
 8002d98:	4694      	mov	ip, r2
 8002d9a:	4463      	add	r3, ip
 8002d9c:	e7ce      	b.n	8002d3c <HAL_UART_Init+0x1b4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Init+0x224>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da6:	f7fe fe33 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
        break;
 8002daa:	e748      	b.n	8002c3e <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7fe fe30 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
        break;
 8002db0:	e7e4      	b.n	8002d7c <HAL_UART_Init+0x1f4>
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	efff69f3 	.word	0xefff69f3
 8002db8:	ffffcfff 	.word	0xffffcfff
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	fffff4ff 	.word	0xfffff4ff
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40004400 	.word	0x40004400
 8002dd0:	0000ffef 	.word	0x0000ffef
 8002dd4:	ffffb7ff 	.word	0xffffb7ff
 8002dd8:	fffffd00 	.word	0xfffffd00
 8002ddc:	000ffcff 	.word	0x000ffcff
 8002de0:	ff48e500 	.word	0xff48e500
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	0000fff0 	.word	0x0000fff0
 8002dec:	fe91ca00 	.word	0xfe91ca00
 8002df0:	01e84800 	.word	0x01e84800

08002df4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002df4:	4770      	bx	lr
 8002df6:	46c0      	nop			@ (mov r8, r8)

08002df8 <siprintf>:
 8002df8:	b40e      	push	{r1, r2, r3}
 8002dfa:	b500      	push	{lr}
 8002dfc:	490b      	ldr	r1, [pc, #44]	@ (8002e2c <siprintf+0x34>)
 8002dfe:	b09c      	sub	sp, #112	@ 0x70
 8002e00:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e02:	9002      	str	r0, [sp, #8]
 8002e04:	9006      	str	r0, [sp, #24]
 8002e06:	9107      	str	r1, [sp, #28]
 8002e08:	9104      	str	r1, [sp, #16]
 8002e0a:	4809      	ldr	r0, [pc, #36]	@ (8002e30 <siprintf+0x38>)
 8002e0c:	4909      	ldr	r1, [pc, #36]	@ (8002e34 <siprintf+0x3c>)
 8002e0e:	cb04      	ldmia	r3!, {r2}
 8002e10:	9105      	str	r1, [sp, #20]
 8002e12:	6800      	ldr	r0, [r0, #0]
 8002e14:	a902      	add	r1, sp, #8
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	f000 f99e 	bl	8003158 <_svfiprintf_r>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	9b02      	ldr	r3, [sp, #8]
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	b01c      	add	sp, #112	@ 0x70
 8002e24:	bc08      	pop	{r3}
 8002e26:	b003      	add	sp, #12
 8002e28:	4718      	bx	r3
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	7fffffff 	.word	0x7fffffff
 8002e30:	20000010 	.word	0x20000010
 8002e34:	ffff0208 	.word	0xffff0208

08002e38 <memset>:
 8002e38:	0003      	movs	r3, r0
 8002e3a:	1882      	adds	r2, r0, r2
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	7019      	strb	r1, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <__errno>:
 8002e48:	4b01      	ldr	r3, [pc, #4]	@ (8002e50 <__errno+0x8>)
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	20000010 	.word	0x20000010

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	2600      	movs	r6, #0
 8002e58:	4c0c      	ldr	r4, [pc, #48]	@ (8002e8c <__libc_init_array+0x38>)
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e90 <__libc_init_array+0x3c>)
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	2600      	movs	r6, #0
 8002e66:	f000 fc65 	bl	8003734 <_init>
 8002e6a:	4c0a      	ldr	r4, [pc, #40]	@ (8002e94 <__libc_init_array+0x40>)
 8002e6c:	4d0a      	ldr	r5, [pc, #40]	@ (8002e98 <__libc_init_array+0x44>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	00b3      	lsls	r3, r6, #2
 8002e7a:	58eb      	ldr	r3, [r5, r3]
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	00b3      	lsls	r3, r6, #2
 8002e84:	58eb      	ldr	r3, [r5, r3]
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	080037b4 	.word	0x080037b4
 8002e90:	080037b4 	.word	0x080037b4
 8002e94:	080037b8 	.word	0x080037b8
 8002e98:	080037b4 	.word	0x080037b4

08002e9c <__retarget_lock_acquire_recursive>:
 8002e9c:	4770      	bx	lr

08002e9e <__retarget_lock_release_recursive>:
 8002e9e:	4770      	bx	lr

08002ea0 <_free_r>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	0005      	movs	r5, r0
 8002ea4:	1e0c      	subs	r4, r1, #0
 8002ea6:	d010      	beq.n	8002eca <_free_r+0x2a>
 8002ea8:	3c04      	subs	r4, #4
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	da00      	bge.n	8002eb2 <_free_r+0x12>
 8002eb0:	18e4      	adds	r4, r4, r3
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f8e0 	bl	8003078 <__malloc_lock>
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f30 <_free_r+0x90>)
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <_free_r+0x2c>
 8002ec0:	6063      	str	r3, [r4, #4]
 8002ec2:	6014      	str	r4, [r2, #0]
 8002ec4:	0028      	movs	r0, r5
 8002ec6:	f000 f8df 	bl	8003088 <__malloc_unlock>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d908      	bls.n	8002ee2 <_free_r+0x42>
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	1821      	adds	r1, r4, r0
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d1f3      	bne.n	8002ec0 <_free_r+0x20>
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	1809      	adds	r1, r1, r0
 8002ede:	6021      	str	r1, [r4, #0]
 8002ee0:	e7ee      	b.n	8002ec0 <_free_r+0x20>
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <_free_r+0x4e>
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	d9f9      	bls.n	8002ee2 <_free_r+0x42>
 8002eee:	6811      	ldr	r1, [r2, #0]
 8002ef0:	1850      	adds	r0, r2, r1
 8002ef2:	42a0      	cmp	r0, r4
 8002ef4:	d10b      	bne.n	8002f0e <_free_r+0x6e>
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	1809      	adds	r1, r1, r0
 8002efa:	1850      	adds	r0, r2, r1
 8002efc:	6011      	str	r1, [r2, #0]
 8002efe:	4283      	cmp	r3, r0
 8002f00:	d1e0      	bne.n	8002ec4 <_free_r+0x24>
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	1841      	adds	r1, r0, r1
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	6053      	str	r3, [r2, #4]
 8002f0c:	e7da      	b.n	8002ec4 <_free_r+0x24>
 8002f0e:	42a0      	cmp	r0, r4
 8002f10:	d902      	bls.n	8002f18 <_free_r+0x78>
 8002f12:	230c      	movs	r3, #12
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	e7d5      	b.n	8002ec4 <_free_r+0x24>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	1821      	adds	r1, r4, r0
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d103      	bne.n	8002f28 <_free_r+0x88>
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	1809      	adds	r1, r1, r0
 8002f26:	6021      	str	r1, [r4, #0]
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6054      	str	r4, [r2, #4]
 8002f2c:	e7ca      	b.n	8002ec4 <_free_r+0x24>
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	20000c54 	.word	0x20000c54

08002f34 <sbrk_aligned>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4e0f      	ldr	r6, [pc, #60]	@ (8002f74 <sbrk_aligned+0x40>)
 8002f38:	000d      	movs	r5, r1
 8002f3a:	6831      	ldr	r1, [r6, #0]
 8002f3c:	0004      	movs	r4, r0
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d102      	bne.n	8002f48 <sbrk_aligned+0x14>
 8002f42:	f000 fb99 	bl	8003678 <_sbrk_r>
 8002f46:	6030      	str	r0, [r6, #0]
 8002f48:	0029      	movs	r1, r5
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	f000 fb94 	bl	8003678 <_sbrk_r>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d103      	bne.n	8002f5c <sbrk_aligned+0x28>
 8002f54:	2501      	movs	r5, #1
 8002f56:	426d      	negs	r5, r5
 8002f58:	0028      	movs	r0, r5
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	1cc5      	adds	r5, r0, #3
 8002f60:	439d      	bics	r5, r3
 8002f62:	42a8      	cmp	r0, r5
 8002f64:	d0f8      	beq.n	8002f58 <sbrk_aligned+0x24>
 8002f66:	1a29      	subs	r1, r5, r0
 8002f68:	0020      	movs	r0, r4
 8002f6a:	f000 fb85 	bl	8003678 <_sbrk_r>
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d1f2      	bne.n	8002f58 <sbrk_aligned+0x24>
 8002f72:	e7ef      	b.n	8002f54 <sbrk_aligned+0x20>
 8002f74:	20000c50 	.word	0x20000c50

08002f78 <_malloc_r>:
 8002f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	1ccb      	adds	r3, r1, #3
 8002f7e:	4393      	bics	r3, r2
 8002f80:	3308      	adds	r3, #8
 8002f82:	0005      	movs	r5, r0
 8002f84:	001f      	movs	r7, r3
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d234      	bcs.n	8002ff4 <_malloc_r+0x7c>
 8002f8a:	270c      	movs	r7, #12
 8002f8c:	42b9      	cmp	r1, r7
 8002f8e:	d833      	bhi.n	8002ff8 <_malloc_r+0x80>
 8002f90:	0028      	movs	r0, r5
 8002f92:	f000 f871 	bl	8003078 <__malloc_lock>
 8002f96:	4e37      	ldr	r6, [pc, #220]	@ (8003074 <_malloc_r+0xfc>)
 8002f98:	6833      	ldr	r3, [r6, #0]
 8002f9a:	001c      	movs	r4, r3
 8002f9c:	2c00      	cmp	r4, #0
 8002f9e:	d12f      	bne.n	8003000 <_malloc_r+0x88>
 8002fa0:	0039      	movs	r1, r7
 8002fa2:	0028      	movs	r0, r5
 8002fa4:	f7ff ffc6 	bl	8002f34 <sbrk_aligned>
 8002fa8:	0004      	movs	r4, r0
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d15f      	bne.n	800306e <_malloc_r+0xf6>
 8002fae:	6834      	ldr	r4, [r6, #0]
 8002fb0:	9400      	str	r4, [sp, #0]
 8002fb2:	9b00      	ldr	r3, [sp, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d14a      	bne.n	800304e <_malloc_r+0xd6>
 8002fb8:	2c00      	cmp	r4, #0
 8002fba:	d052      	beq.n	8003062 <_malloc_r+0xea>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	0028      	movs	r0, r5
 8002fc0:	18e3      	adds	r3, r4, r3
 8002fc2:	9900      	ldr	r1, [sp, #0]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	f000 fb57 	bl	8003678 <_sbrk_r>
 8002fca:	9b01      	ldr	r3, [sp, #4]
 8002fcc:	4283      	cmp	r3, r0
 8002fce:	d148      	bne.n	8003062 <_malloc_r+0xea>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	0028      	movs	r0, r5
 8002fd4:	1aff      	subs	r7, r7, r3
 8002fd6:	0039      	movs	r1, r7
 8002fd8:	f7ff ffac 	bl	8002f34 <sbrk_aligned>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d040      	beq.n	8003062 <_malloc_r+0xea>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	19db      	adds	r3, r3, r7
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	6833      	ldr	r3, [r6, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	2a00      	cmp	r2, #0
 8002fec:	d133      	bne.n	8003056 <_malloc_r+0xde>
 8002fee:	9b00      	ldr	r3, [sp, #0]
 8002ff0:	6033      	str	r3, [r6, #0]
 8002ff2:	e019      	b.n	8003028 <_malloc_r+0xb0>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dac9      	bge.n	8002f8c <_malloc_r+0x14>
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003000:	6821      	ldr	r1, [r4, #0]
 8003002:	1bc9      	subs	r1, r1, r7
 8003004:	d420      	bmi.n	8003048 <_malloc_r+0xd0>
 8003006:	290b      	cmp	r1, #11
 8003008:	d90a      	bls.n	8003020 <_malloc_r+0xa8>
 800300a:	19e2      	adds	r2, r4, r7
 800300c:	6027      	str	r7, [r4, #0]
 800300e:	42a3      	cmp	r3, r4
 8003010:	d104      	bne.n	800301c <_malloc_r+0xa4>
 8003012:	6032      	str	r2, [r6, #0]
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	6053      	str	r3, [r2, #4]
 800301a:	e005      	b.n	8003028 <_malloc_r+0xb0>
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e7f9      	b.n	8003014 <_malloc_r+0x9c>
 8003020:	6862      	ldr	r2, [r4, #4]
 8003022:	42a3      	cmp	r3, r4
 8003024:	d10e      	bne.n	8003044 <_malloc_r+0xcc>
 8003026:	6032      	str	r2, [r6, #0]
 8003028:	0028      	movs	r0, r5
 800302a:	f000 f82d 	bl	8003088 <__malloc_unlock>
 800302e:	0020      	movs	r0, r4
 8003030:	2207      	movs	r2, #7
 8003032:	300b      	adds	r0, #11
 8003034:	1d23      	adds	r3, r4, #4
 8003036:	4390      	bics	r0, r2
 8003038:	1ac2      	subs	r2, r0, r3
 800303a:	4298      	cmp	r0, r3
 800303c:	d0df      	beq.n	8002ffe <_malloc_r+0x86>
 800303e:	1a1b      	subs	r3, r3, r0
 8003040:	50a3      	str	r3, [r4, r2]
 8003042:	e7dc      	b.n	8002ffe <_malloc_r+0x86>
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e7ef      	b.n	8003028 <_malloc_r+0xb0>
 8003048:	0023      	movs	r3, r4
 800304a:	6864      	ldr	r4, [r4, #4]
 800304c:	e7a6      	b.n	8002f9c <_malloc_r+0x24>
 800304e:	9c00      	ldr	r4, [sp, #0]
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	e7ad      	b.n	8002fb2 <_malloc_r+0x3a>
 8003056:	001a      	movs	r2, r3
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	42a3      	cmp	r3, r4
 800305c:	d1fb      	bne.n	8003056 <_malloc_r+0xde>
 800305e:	2300      	movs	r3, #0
 8003060:	e7da      	b.n	8003018 <_malloc_r+0xa0>
 8003062:	230c      	movs	r3, #12
 8003064:	0028      	movs	r0, r5
 8003066:	602b      	str	r3, [r5, #0]
 8003068:	f000 f80e 	bl	8003088 <__malloc_unlock>
 800306c:	e7c6      	b.n	8002ffc <_malloc_r+0x84>
 800306e:	6007      	str	r7, [r0, #0]
 8003070:	e7da      	b.n	8003028 <_malloc_r+0xb0>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000c54 	.word	0x20000c54

08003078 <__malloc_lock>:
 8003078:	b510      	push	{r4, lr}
 800307a:	4802      	ldr	r0, [pc, #8]	@ (8003084 <__malloc_lock+0xc>)
 800307c:	f7ff ff0e 	bl	8002e9c <__retarget_lock_acquire_recursive>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	20000c4c 	.word	0x20000c4c

08003088 <__malloc_unlock>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4802      	ldr	r0, [pc, #8]	@ (8003094 <__malloc_unlock+0xc>)
 800308c:	f7ff ff07 	bl	8002e9e <__retarget_lock_release_recursive>
 8003090:	bd10      	pop	{r4, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	20000c4c 	.word	0x20000c4c

08003098 <__ssputs_r>:
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	688e      	ldr	r6, [r1, #8]
 800309c:	b085      	sub	sp, #20
 800309e:	001f      	movs	r7, r3
 80030a0:	000c      	movs	r4, r1
 80030a2:	680b      	ldr	r3, [r1, #0]
 80030a4:	9002      	str	r0, [sp, #8]
 80030a6:	9203      	str	r2, [sp, #12]
 80030a8:	42be      	cmp	r6, r7
 80030aa:	d830      	bhi.n	800310e <__ssputs_r+0x76>
 80030ac:	210c      	movs	r1, #12
 80030ae:	5e62      	ldrsh	r2, [r4, r1]
 80030b0:	2190      	movs	r1, #144	@ 0x90
 80030b2:	00c9      	lsls	r1, r1, #3
 80030b4:	420a      	tst	r2, r1
 80030b6:	d028      	beq.n	800310a <__ssputs_r+0x72>
 80030b8:	2003      	movs	r0, #3
 80030ba:	6921      	ldr	r1, [r4, #16]
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	6963      	ldr	r3, [r4, #20]
 80030c2:	4343      	muls	r3, r0
 80030c4:	9801      	ldr	r0, [sp, #4]
 80030c6:	0fdd      	lsrs	r5, r3, #31
 80030c8:	18ed      	adds	r5, r5, r3
 80030ca:	1c7b      	adds	r3, r7, #1
 80030cc:	181b      	adds	r3, r3, r0
 80030ce:	106d      	asrs	r5, r5, #1
 80030d0:	42ab      	cmp	r3, r5
 80030d2:	d900      	bls.n	80030d6 <__ssputs_r+0x3e>
 80030d4:	001d      	movs	r5, r3
 80030d6:	0552      	lsls	r2, r2, #21
 80030d8:	d528      	bpl.n	800312c <__ssputs_r+0x94>
 80030da:	0029      	movs	r1, r5
 80030dc:	9802      	ldr	r0, [sp, #8]
 80030de:	f7ff ff4b 	bl	8002f78 <_malloc_r>
 80030e2:	1e06      	subs	r6, r0, #0
 80030e4:	d02c      	beq.n	8003140 <__ssputs_r+0xa8>
 80030e6:	9a01      	ldr	r2, [sp, #4]
 80030e8:	6921      	ldr	r1, [r4, #16]
 80030ea:	f000 fae2 	bl	80036b2 <memcpy>
 80030ee:	89a2      	ldrh	r2, [r4, #12]
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <__ssputs_r+0xbc>)
 80030f2:	401a      	ands	r2, r3
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	4313      	orrs	r3, r2
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	6126      	str	r6, [r4, #16]
 80030fe:	18f6      	adds	r6, r6, r3
 8003100:	6026      	str	r6, [r4, #0]
 8003102:	003e      	movs	r6, r7
 8003104:	6165      	str	r5, [r4, #20]
 8003106:	1aed      	subs	r5, r5, r3
 8003108:	60a5      	str	r5, [r4, #8]
 800310a:	42be      	cmp	r6, r7
 800310c:	d900      	bls.n	8003110 <__ssputs_r+0x78>
 800310e:	003e      	movs	r6, r7
 8003110:	0032      	movs	r2, r6
 8003112:	9903      	ldr	r1, [sp, #12]
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	f000 fa9b 	bl	8003650 <memmove>
 800311a:	2000      	movs	r0, #0
 800311c:	68a3      	ldr	r3, [r4, #8]
 800311e:	1b9b      	subs	r3, r3, r6
 8003120:	60a3      	str	r3, [r4, #8]
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	199b      	adds	r3, r3, r6
 8003126:	6023      	str	r3, [r4, #0]
 8003128:	b005      	add	sp, #20
 800312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800312c:	002a      	movs	r2, r5
 800312e:	9802      	ldr	r0, [sp, #8]
 8003130:	f000 fac8 	bl	80036c4 <_realloc_r>
 8003134:	1e06      	subs	r6, r0, #0
 8003136:	d1e0      	bne.n	80030fa <__ssputs_r+0x62>
 8003138:	6921      	ldr	r1, [r4, #16]
 800313a:	9802      	ldr	r0, [sp, #8]
 800313c:	f7ff feb0 	bl	8002ea0 <_free_r>
 8003140:	230c      	movs	r3, #12
 8003142:	2001      	movs	r0, #1
 8003144:	9a02      	ldr	r2, [sp, #8]
 8003146:	4240      	negs	r0, r0
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	89a2      	ldrh	r2, [r4, #12]
 800314c:	3334      	adds	r3, #52	@ 0x34
 800314e:	4313      	orrs	r3, r2
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	e7e9      	b.n	8003128 <__ssputs_r+0x90>
 8003154:	fffffb7f 	.word	0xfffffb7f

08003158 <_svfiprintf_r>:
 8003158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315a:	b0a1      	sub	sp, #132	@ 0x84
 800315c:	9003      	str	r0, [sp, #12]
 800315e:	001d      	movs	r5, r3
 8003160:	898b      	ldrh	r3, [r1, #12]
 8003162:	000f      	movs	r7, r1
 8003164:	0016      	movs	r6, r2
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	d511      	bpl.n	800318e <_svfiprintf_r+0x36>
 800316a:	690b      	ldr	r3, [r1, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <_svfiprintf_r+0x36>
 8003170:	2140      	movs	r1, #64	@ 0x40
 8003172:	f7ff ff01 	bl	8002f78 <_malloc_r>
 8003176:	6038      	str	r0, [r7, #0]
 8003178:	6138      	str	r0, [r7, #16]
 800317a:	2800      	cmp	r0, #0
 800317c:	d105      	bne.n	800318a <_svfiprintf_r+0x32>
 800317e:	230c      	movs	r3, #12
 8003180:	9a03      	ldr	r2, [sp, #12]
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	2001      	movs	r0, #1
 8003186:	4240      	negs	r0, r0
 8003188:	e0cf      	b.n	800332a <_svfiprintf_r+0x1d2>
 800318a:	2340      	movs	r3, #64	@ 0x40
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	ac08      	add	r4, sp, #32
 8003192:	6163      	str	r3, [r4, #20]
 8003194:	3320      	adds	r3, #32
 8003196:	7663      	strb	r3, [r4, #25]
 8003198:	3310      	adds	r3, #16
 800319a:	76a3      	strb	r3, [r4, #26]
 800319c:	9507      	str	r5, [sp, #28]
 800319e:	0035      	movs	r5, r6
 80031a0:	782b      	ldrb	r3, [r5, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <_svfiprintf_r+0x52>
 80031a6:	2b25      	cmp	r3, #37	@ 0x25
 80031a8:	d148      	bne.n	800323c <_svfiprintf_r+0xe4>
 80031aa:	1bab      	subs	r3, r5, r6
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d00b      	beq.n	80031ca <_svfiprintf_r+0x72>
 80031b2:	0032      	movs	r2, r6
 80031b4:	0039      	movs	r1, r7
 80031b6:	9803      	ldr	r0, [sp, #12]
 80031b8:	f7ff ff6e 	bl	8003098 <__ssputs_r>
 80031bc:	3001      	adds	r0, #1
 80031be:	d100      	bne.n	80031c2 <_svfiprintf_r+0x6a>
 80031c0:	e0ae      	b.n	8003320 <_svfiprintf_r+0x1c8>
 80031c2:	6963      	ldr	r3, [r4, #20]
 80031c4:	9a05      	ldr	r2, [sp, #20]
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	6163      	str	r3, [r4, #20]
 80031ca:	782b      	ldrb	r3, [r5, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d100      	bne.n	80031d2 <_svfiprintf_r+0x7a>
 80031d0:	e0a6      	b.n	8003320 <_svfiprintf_r+0x1c8>
 80031d2:	2201      	movs	r2, #1
 80031d4:	2300      	movs	r3, #0
 80031d6:	4252      	negs	r2, r2
 80031d8:	6062      	str	r2, [r4, #4]
 80031da:	a904      	add	r1, sp, #16
 80031dc:	3254      	adds	r2, #84	@ 0x54
 80031de:	1852      	adds	r2, r2, r1
 80031e0:	1c6e      	adds	r6, r5, #1
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	60e3      	str	r3, [r4, #12]
 80031e6:	60a3      	str	r3, [r4, #8]
 80031e8:	7013      	strb	r3, [r2, #0]
 80031ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80031ec:	4b54      	ldr	r3, [pc, #336]	@ (8003340 <_svfiprintf_r+0x1e8>)
 80031ee:	2205      	movs	r2, #5
 80031f0:	0018      	movs	r0, r3
 80031f2:	7831      	ldrb	r1, [r6, #0]
 80031f4:	9305      	str	r3, [sp, #20]
 80031f6:	f000 fa51 	bl	800369c <memchr>
 80031fa:	1c75      	adds	r5, r6, #1
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d11f      	bne.n	8003240 <_svfiprintf_r+0xe8>
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	06d3      	lsls	r3, r2, #27
 8003204:	d504      	bpl.n	8003210 <_svfiprintf_r+0xb8>
 8003206:	2353      	movs	r3, #83	@ 0x53
 8003208:	a904      	add	r1, sp, #16
 800320a:	185b      	adds	r3, r3, r1
 800320c:	2120      	movs	r1, #32
 800320e:	7019      	strb	r1, [r3, #0]
 8003210:	0713      	lsls	r3, r2, #28
 8003212:	d504      	bpl.n	800321e <_svfiprintf_r+0xc6>
 8003214:	2353      	movs	r3, #83	@ 0x53
 8003216:	a904      	add	r1, sp, #16
 8003218:	185b      	adds	r3, r3, r1
 800321a:	212b      	movs	r1, #43	@ 0x2b
 800321c:	7019      	strb	r1, [r3, #0]
 800321e:	7833      	ldrb	r3, [r6, #0]
 8003220:	2b2a      	cmp	r3, #42	@ 0x2a
 8003222:	d016      	beq.n	8003252 <_svfiprintf_r+0xfa>
 8003224:	0035      	movs	r5, r6
 8003226:	2100      	movs	r1, #0
 8003228:	200a      	movs	r0, #10
 800322a:	68e3      	ldr	r3, [r4, #12]
 800322c:	782a      	ldrb	r2, [r5, #0]
 800322e:	1c6e      	adds	r6, r5, #1
 8003230:	3a30      	subs	r2, #48	@ 0x30
 8003232:	2a09      	cmp	r2, #9
 8003234:	d950      	bls.n	80032d8 <_svfiprintf_r+0x180>
 8003236:	2900      	cmp	r1, #0
 8003238:	d111      	bne.n	800325e <_svfiprintf_r+0x106>
 800323a:	e017      	b.n	800326c <_svfiprintf_r+0x114>
 800323c:	3501      	adds	r5, #1
 800323e:	e7af      	b.n	80031a0 <_svfiprintf_r+0x48>
 8003240:	9b05      	ldr	r3, [sp, #20]
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	1ac0      	subs	r0, r0, r3
 8003246:	2301      	movs	r3, #1
 8003248:	4083      	lsls	r3, r0
 800324a:	4313      	orrs	r3, r2
 800324c:	002e      	movs	r6, r5
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	e7cc      	b.n	80031ec <_svfiprintf_r+0x94>
 8003252:	9b07      	ldr	r3, [sp, #28]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9107      	str	r1, [sp, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db01      	blt.n	8003262 <_svfiprintf_r+0x10a>
 800325e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003260:	e004      	b.n	800326c <_svfiprintf_r+0x114>
 8003262:	425b      	negs	r3, r3
 8003264:	60e3      	str	r3, [r4, #12]
 8003266:	2302      	movs	r3, #2
 8003268:	4313      	orrs	r3, r2
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	782b      	ldrb	r3, [r5, #0]
 800326e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003270:	d10c      	bne.n	800328c <_svfiprintf_r+0x134>
 8003272:	786b      	ldrb	r3, [r5, #1]
 8003274:	2b2a      	cmp	r3, #42	@ 0x2a
 8003276:	d134      	bne.n	80032e2 <_svfiprintf_r+0x18a>
 8003278:	9b07      	ldr	r3, [sp, #28]
 800327a:	3502      	adds	r5, #2
 800327c:	1d1a      	adds	r2, r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	9207      	str	r2, [sp, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da01      	bge.n	800328a <_svfiprintf_r+0x132>
 8003286:	2301      	movs	r3, #1
 8003288:	425b      	negs	r3, r3
 800328a:	9309      	str	r3, [sp, #36]	@ 0x24
 800328c:	4e2d      	ldr	r6, [pc, #180]	@ (8003344 <_svfiprintf_r+0x1ec>)
 800328e:	2203      	movs	r2, #3
 8003290:	0030      	movs	r0, r6
 8003292:	7829      	ldrb	r1, [r5, #0]
 8003294:	f000 fa02 	bl	800369c <memchr>
 8003298:	2800      	cmp	r0, #0
 800329a:	d006      	beq.n	80032aa <_svfiprintf_r+0x152>
 800329c:	2340      	movs	r3, #64	@ 0x40
 800329e:	1b80      	subs	r0, r0, r6
 80032a0:	4083      	lsls	r3, r0
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	3501      	adds	r5, #1
 80032a6:	4313      	orrs	r3, r2
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	7829      	ldrb	r1, [r5, #0]
 80032ac:	2206      	movs	r2, #6
 80032ae:	4826      	ldr	r0, [pc, #152]	@ (8003348 <_svfiprintf_r+0x1f0>)
 80032b0:	1c6e      	adds	r6, r5, #1
 80032b2:	7621      	strb	r1, [r4, #24]
 80032b4:	f000 f9f2 	bl	800369c <memchr>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d038      	beq.n	800332e <_svfiprintf_r+0x1d6>
 80032bc:	4b23      	ldr	r3, [pc, #140]	@ (800334c <_svfiprintf_r+0x1f4>)
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d122      	bne.n	8003308 <_svfiprintf_r+0x1b0>
 80032c2:	2207      	movs	r2, #7
 80032c4:	9b07      	ldr	r3, [sp, #28]
 80032c6:	3307      	adds	r3, #7
 80032c8:	4393      	bics	r3, r2
 80032ca:	3308      	adds	r3, #8
 80032cc:	9307      	str	r3, [sp, #28]
 80032ce:	6963      	ldr	r3, [r4, #20]
 80032d0:	9a04      	ldr	r2, [sp, #16]
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	6163      	str	r3, [r4, #20]
 80032d6:	e762      	b.n	800319e <_svfiprintf_r+0x46>
 80032d8:	4343      	muls	r3, r0
 80032da:	0035      	movs	r5, r6
 80032dc:	2101      	movs	r1, #1
 80032de:	189b      	adds	r3, r3, r2
 80032e0:	e7a4      	b.n	800322c <_svfiprintf_r+0xd4>
 80032e2:	2300      	movs	r3, #0
 80032e4:	200a      	movs	r0, #10
 80032e6:	0019      	movs	r1, r3
 80032e8:	3501      	adds	r5, #1
 80032ea:	6063      	str	r3, [r4, #4]
 80032ec:	782a      	ldrb	r2, [r5, #0]
 80032ee:	1c6e      	adds	r6, r5, #1
 80032f0:	3a30      	subs	r2, #48	@ 0x30
 80032f2:	2a09      	cmp	r2, #9
 80032f4:	d903      	bls.n	80032fe <_svfiprintf_r+0x1a6>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c8      	beq.n	800328c <_svfiprintf_r+0x134>
 80032fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80032fc:	e7c6      	b.n	800328c <_svfiprintf_r+0x134>
 80032fe:	4341      	muls	r1, r0
 8003300:	0035      	movs	r5, r6
 8003302:	2301      	movs	r3, #1
 8003304:	1889      	adds	r1, r1, r2
 8003306:	e7f1      	b.n	80032ec <_svfiprintf_r+0x194>
 8003308:	aa07      	add	r2, sp, #28
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	0021      	movs	r1, r4
 800330e:	003a      	movs	r2, r7
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <_svfiprintf_r+0x1f8>)
 8003312:	9803      	ldr	r0, [sp, #12]
 8003314:	e000      	b.n	8003318 <_svfiprintf_r+0x1c0>
 8003316:	bf00      	nop
 8003318:	9004      	str	r0, [sp, #16]
 800331a:	9b04      	ldr	r3, [sp, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	d1d6      	bne.n	80032ce <_svfiprintf_r+0x176>
 8003320:	89bb      	ldrh	r3, [r7, #12]
 8003322:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003324:	065b      	lsls	r3, r3, #25
 8003326:	d500      	bpl.n	800332a <_svfiprintf_r+0x1d2>
 8003328:	e72c      	b.n	8003184 <_svfiprintf_r+0x2c>
 800332a:	b021      	add	sp, #132	@ 0x84
 800332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332e:	aa07      	add	r2, sp, #28
 8003330:	9200      	str	r2, [sp, #0]
 8003332:	0021      	movs	r1, r4
 8003334:	003a      	movs	r2, r7
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <_svfiprintf_r+0x1f8>)
 8003338:	9803      	ldr	r0, [sp, #12]
 800333a:	f000 f87b 	bl	8003434 <_printf_i>
 800333e:	e7eb      	b.n	8003318 <_svfiprintf_r+0x1c0>
 8003340:	08003778 	.word	0x08003778
 8003344:	0800377e 	.word	0x0800377e
 8003348:	08003782 	.word	0x08003782
 800334c:	00000000 	.word	0x00000000
 8003350:	08003099 	.word	0x08003099

08003354 <_printf_common>:
 8003354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003356:	0016      	movs	r6, r2
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	688a      	ldr	r2, [r1, #8]
 800335c:	690b      	ldr	r3, [r1, #16]
 800335e:	000c      	movs	r4, r1
 8003360:	9000      	str	r0, [sp, #0]
 8003362:	4293      	cmp	r3, r2
 8003364:	da00      	bge.n	8003368 <_printf_common+0x14>
 8003366:	0013      	movs	r3, r2
 8003368:	0022      	movs	r2, r4
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	3243      	adds	r2, #67	@ 0x43
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	2a00      	cmp	r2, #0
 8003372:	d001      	beq.n	8003378 <_printf_common+0x24>
 8003374:	3301      	adds	r3, #1
 8003376:	6033      	str	r3, [r6, #0]
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	069b      	lsls	r3, r3, #26
 800337c:	d502      	bpl.n	8003384 <_printf_common+0x30>
 800337e:	6833      	ldr	r3, [r6, #0]
 8003380:	3302      	adds	r3, #2
 8003382:	6033      	str	r3, [r6, #0]
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	2306      	movs	r3, #6
 8003388:	0015      	movs	r5, r2
 800338a:	401d      	ands	r5, r3
 800338c:	421a      	tst	r2, r3
 800338e:	d027      	beq.n	80033e0 <_printf_common+0x8c>
 8003390:	0023      	movs	r3, r4
 8003392:	3343      	adds	r3, #67	@ 0x43
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	4193      	sbcs	r3, r2
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	0692      	lsls	r2, r2, #26
 800339e:	d430      	bmi.n	8003402 <_printf_common+0xae>
 80033a0:	0022      	movs	r2, r4
 80033a2:	9901      	ldr	r1, [sp, #4]
 80033a4:	9800      	ldr	r0, [sp, #0]
 80033a6:	9d08      	ldr	r5, [sp, #32]
 80033a8:	3243      	adds	r2, #67	@ 0x43
 80033aa:	47a8      	blx	r5
 80033ac:	3001      	adds	r0, #1
 80033ae:	d025      	beq.n	80033fc <_printf_common+0xa8>
 80033b0:	2206      	movs	r2, #6
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	2500      	movs	r5, #0
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d105      	bne.n	80033c8 <_printf_common+0x74>
 80033bc:	6833      	ldr	r3, [r6, #0]
 80033be:	68e5      	ldr	r5, [r4, #12]
 80033c0:	1aed      	subs	r5, r5, r3
 80033c2:	43eb      	mvns	r3, r5
 80033c4:	17db      	asrs	r3, r3, #31
 80033c6:	401d      	ands	r5, r3
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	6922      	ldr	r2, [r4, #16]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	dd01      	ble.n	80033d4 <_printf_common+0x80>
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	18ed      	adds	r5, r5, r3
 80033d4:	2600      	movs	r6, #0
 80033d6:	42b5      	cmp	r5, r6
 80033d8:	d120      	bne.n	800341c <_printf_common+0xc8>
 80033da:	2000      	movs	r0, #0
 80033dc:	e010      	b.n	8003400 <_printf_common+0xac>
 80033de:	3501      	adds	r5, #1
 80033e0:	68e3      	ldr	r3, [r4, #12]
 80033e2:	6832      	ldr	r2, [r6, #0]
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	42ab      	cmp	r3, r5
 80033e8:	ddd2      	ble.n	8003390 <_printf_common+0x3c>
 80033ea:	0022      	movs	r2, r4
 80033ec:	2301      	movs	r3, #1
 80033ee:	9901      	ldr	r1, [sp, #4]
 80033f0:	9800      	ldr	r0, [sp, #0]
 80033f2:	9f08      	ldr	r7, [sp, #32]
 80033f4:	3219      	adds	r2, #25
 80033f6:	47b8      	blx	r7
 80033f8:	3001      	adds	r0, #1
 80033fa:	d1f0      	bne.n	80033de <_printf_common+0x8a>
 80033fc:	2001      	movs	r0, #1
 80033fe:	4240      	negs	r0, r0
 8003400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003402:	2030      	movs	r0, #48	@ 0x30
 8003404:	18e1      	adds	r1, r4, r3
 8003406:	3143      	adds	r1, #67	@ 0x43
 8003408:	7008      	strb	r0, [r1, #0]
 800340a:	0021      	movs	r1, r4
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	3145      	adds	r1, #69	@ 0x45
 8003410:	7809      	ldrb	r1, [r1, #0]
 8003412:	18a2      	adds	r2, r4, r2
 8003414:	3243      	adds	r2, #67	@ 0x43
 8003416:	3302      	adds	r3, #2
 8003418:	7011      	strb	r1, [r2, #0]
 800341a:	e7c1      	b.n	80033a0 <_printf_common+0x4c>
 800341c:	0022      	movs	r2, r4
 800341e:	2301      	movs	r3, #1
 8003420:	9901      	ldr	r1, [sp, #4]
 8003422:	9800      	ldr	r0, [sp, #0]
 8003424:	9f08      	ldr	r7, [sp, #32]
 8003426:	321a      	adds	r2, #26
 8003428:	47b8      	blx	r7
 800342a:	3001      	adds	r0, #1
 800342c:	d0e6      	beq.n	80033fc <_printf_common+0xa8>
 800342e:	3601      	adds	r6, #1
 8003430:	e7d1      	b.n	80033d6 <_printf_common+0x82>
	...

08003434 <_printf_i>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	b08b      	sub	sp, #44	@ 0x2c
 8003438:	9206      	str	r2, [sp, #24]
 800343a:	000a      	movs	r2, r1
 800343c:	3243      	adds	r2, #67	@ 0x43
 800343e:	9307      	str	r3, [sp, #28]
 8003440:	9005      	str	r0, [sp, #20]
 8003442:	9203      	str	r2, [sp, #12]
 8003444:	7e0a      	ldrb	r2, [r1, #24]
 8003446:	000c      	movs	r4, r1
 8003448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800344a:	2a78      	cmp	r2, #120	@ 0x78
 800344c:	d809      	bhi.n	8003462 <_printf_i+0x2e>
 800344e:	2a62      	cmp	r2, #98	@ 0x62
 8003450:	d80b      	bhi.n	800346a <_printf_i+0x36>
 8003452:	2a00      	cmp	r2, #0
 8003454:	d100      	bne.n	8003458 <_printf_i+0x24>
 8003456:	e0bc      	b.n	80035d2 <_printf_i+0x19e>
 8003458:	497b      	ldr	r1, [pc, #492]	@ (8003648 <_printf_i+0x214>)
 800345a:	9104      	str	r1, [sp, #16]
 800345c:	2a58      	cmp	r2, #88	@ 0x58
 800345e:	d100      	bne.n	8003462 <_printf_i+0x2e>
 8003460:	e090      	b.n	8003584 <_printf_i+0x150>
 8003462:	0025      	movs	r5, r4
 8003464:	3542      	adds	r5, #66	@ 0x42
 8003466:	702a      	strb	r2, [r5, #0]
 8003468:	e022      	b.n	80034b0 <_printf_i+0x7c>
 800346a:	0010      	movs	r0, r2
 800346c:	3863      	subs	r0, #99	@ 0x63
 800346e:	2815      	cmp	r0, #21
 8003470:	d8f7      	bhi.n	8003462 <_printf_i+0x2e>
 8003472:	f7fc fe51 	bl	8000118 <__gnu_thumb1_case_shi>
 8003476:	0016      	.short	0x0016
 8003478:	fff6001f 	.word	0xfff6001f
 800347c:	fff6fff6 	.word	0xfff6fff6
 8003480:	001ffff6 	.word	0x001ffff6
 8003484:	fff6fff6 	.word	0xfff6fff6
 8003488:	fff6fff6 	.word	0xfff6fff6
 800348c:	003600a1 	.word	0x003600a1
 8003490:	fff60080 	.word	0xfff60080
 8003494:	00b2fff6 	.word	0x00b2fff6
 8003498:	0036fff6 	.word	0x0036fff6
 800349c:	fff6fff6 	.word	0xfff6fff6
 80034a0:	0084      	.short	0x0084
 80034a2:	0025      	movs	r5, r4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	3542      	adds	r5, #66	@ 0x42
 80034a8:	1d11      	adds	r1, r2, #4
 80034aa:	6019      	str	r1, [r3, #0]
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	702b      	strb	r3, [r5, #0]
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0a0      	b.n	80035f6 <_printf_i+0x1c2>
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	6809      	ldr	r1, [r1, #0]
 80034b8:	1d02      	adds	r2, r0, #4
 80034ba:	060d      	lsls	r5, r1, #24
 80034bc:	d50b      	bpl.n	80034d6 <_printf_i+0xa2>
 80034be:	6806      	ldr	r6, [r0, #0]
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	2e00      	cmp	r6, #0
 80034c4:	da03      	bge.n	80034ce <_printf_i+0x9a>
 80034c6:	232d      	movs	r3, #45	@ 0x2d
 80034c8:	9a03      	ldr	r2, [sp, #12]
 80034ca:	4276      	negs	r6, r6
 80034cc:	7013      	strb	r3, [r2, #0]
 80034ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003648 <_printf_i+0x214>)
 80034d0:	270a      	movs	r7, #10
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	e018      	b.n	8003508 <_printf_i+0xd4>
 80034d6:	6806      	ldr	r6, [r0, #0]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	0649      	lsls	r1, r1, #25
 80034dc:	d5f1      	bpl.n	80034c2 <_printf_i+0x8e>
 80034de:	b236      	sxth	r6, r6
 80034e0:	e7ef      	b.n	80034c2 <_printf_i+0x8e>
 80034e2:	6808      	ldr	r0, [r1, #0]
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	c940      	ldmia	r1!, {r6}
 80034e8:	0605      	lsls	r5, r0, #24
 80034ea:	d402      	bmi.n	80034f2 <_printf_i+0xbe>
 80034ec:	0640      	lsls	r0, r0, #25
 80034ee:	d500      	bpl.n	80034f2 <_printf_i+0xbe>
 80034f0:	b2b6      	uxth	r6, r6
 80034f2:	6019      	str	r1, [r3, #0]
 80034f4:	4b54      	ldr	r3, [pc, #336]	@ (8003648 <_printf_i+0x214>)
 80034f6:	270a      	movs	r7, #10
 80034f8:	9304      	str	r3, [sp, #16]
 80034fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80034fc:	d100      	bne.n	8003500 <_printf_i+0xcc>
 80034fe:	3f02      	subs	r7, #2
 8003500:	0023      	movs	r3, r4
 8003502:	2200      	movs	r2, #0
 8003504:	3343      	adds	r3, #67	@ 0x43
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	60a3      	str	r3, [r4, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db03      	blt.n	8003518 <_printf_i+0xe4>
 8003510:	2104      	movs	r1, #4
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	438a      	bics	r2, r1
 8003516:	6022      	str	r2, [r4, #0]
 8003518:	2e00      	cmp	r6, #0
 800351a:	d102      	bne.n	8003522 <_printf_i+0xee>
 800351c:	9d03      	ldr	r5, [sp, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <_printf_i+0x108>
 8003522:	9d03      	ldr	r5, [sp, #12]
 8003524:	0030      	movs	r0, r6
 8003526:	0039      	movs	r1, r7
 8003528:	f7fc fe86 	bl	8000238 <__aeabi_uidivmod>
 800352c:	9b04      	ldr	r3, [sp, #16]
 800352e:	3d01      	subs	r5, #1
 8003530:	5c5b      	ldrb	r3, [r3, r1]
 8003532:	702b      	strb	r3, [r5, #0]
 8003534:	0033      	movs	r3, r6
 8003536:	0006      	movs	r6, r0
 8003538:	429f      	cmp	r7, r3
 800353a:	d9f3      	bls.n	8003524 <_printf_i+0xf0>
 800353c:	2f08      	cmp	r7, #8
 800353e:	d109      	bne.n	8003554 <_printf_i+0x120>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	07db      	lsls	r3, r3, #31
 8003544:	d506      	bpl.n	8003554 <_printf_i+0x120>
 8003546:	6862      	ldr	r2, [r4, #4]
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	429a      	cmp	r2, r3
 800354c:	dc02      	bgt.n	8003554 <_printf_i+0x120>
 800354e:	2330      	movs	r3, #48	@ 0x30
 8003550:	3d01      	subs	r5, #1
 8003552:	702b      	strb	r3, [r5, #0]
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	1b5b      	subs	r3, r3, r5
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	9b07      	ldr	r3, [sp, #28]
 800355c:	0021      	movs	r1, r4
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	9805      	ldr	r0, [sp, #20]
 8003562:	9b06      	ldr	r3, [sp, #24]
 8003564:	aa09      	add	r2, sp, #36	@ 0x24
 8003566:	f7ff fef5 	bl	8003354 <_printf_common>
 800356a:	3001      	adds	r0, #1
 800356c:	d148      	bne.n	8003600 <_printf_i+0x1cc>
 800356e:	2001      	movs	r0, #1
 8003570:	4240      	negs	r0, r0
 8003572:	b00b      	add	sp, #44	@ 0x2c
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003576:	2220      	movs	r2, #32
 8003578:	6809      	ldr	r1, [r1, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	6022      	str	r2, [r4, #0]
 800357e:	2278      	movs	r2, #120	@ 0x78
 8003580:	4932      	ldr	r1, [pc, #200]	@ (800364c <_printf_i+0x218>)
 8003582:	9104      	str	r1, [sp, #16]
 8003584:	0021      	movs	r1, r4
 8003586:	3145      	adds	r1, #69	@ 0x45
 8003588:	700a      	strb	r2, [r1, #0]
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	c940      	ldmia	r1!, {r6}
 8003590:	0610      	lsls	r0, r2, #24
 8003592:	d402      	bmi.n	800359a <_printf_i+0x166>
 8003594:	0650      	lsls	r0, r2, #25
 8003596:	d500      	bpl.n	800359a <_printf_i+0x166>
 8003598:	b2b6      	uxth	r6, r6
 800359a:	6019      	str	r1, [r3, #0]
 800359c:	07d3      	lsls	r3, r2, #31
 800359e:	d502      	bpl.n	80035a6 <_printf_i+0x172>
 80035a0:	2320      	movs	r3, #32
 80035a2:	4313      	orrs	r3, r2
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	d001      	beq.n	80035ae <_printf_i+0x17a>
 80035aa:	2710      	movs	r7, #16
 80035ac:	e7a8      	b.n	8003500 <_printf_i+0xcc>
 80035ae:	2220      	movs	r2, #32
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	4393      	bics	r3, r2
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	e7f8      	b.n	80035aa <_printf_i+0x176>
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	680d      	ldr	r5, [r1, #0]
 80035bc:	1d10      	adds	r0, r2, #4
 80035be:	6949      	ldr	r1, [r1, #20]
 80035c0:	6018      	str	r0, [r3, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	062e      	lsls	r6, r5, #24
 80035c6:	d501      	bpl.n	80035cc <_printf_i+0x198>
 80035c8:	6019      	str	r1, [r3, #0]
 80035ca:	e002      	b.n	80035d2 <_printf_i+0x19e>
 80035cc:	066d      	lsls	r5, r5, #25
 80035ce:	d5fb      	bpl.n	80035c8 <_printf_i+0x194>
 80035d0:	8019      	strh	r1, [r3, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9d03      	ldr	r5, [sp, #12]
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	e7bf      	b.n	800355a <_printf_i+0x126>
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	1d11      	adds	r1, r2, #4
 80035de:	6019      	str	r1, [r3, #0]
 80035e0:	6815      	ldr	r5, [r2, #0]
 80035e2:	2100      	movs	r1, #0
 80035e4:	0028      	movs	r0, r5
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	f000 f858 	bl	800369c <memchr>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d001      	beq.n	80035f4 <_printf_i+0x1c0>
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	6060      	str	r0, [r4, #4]
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9a03      	ldr	r2, [sp, #12]
 80035fc:	7013      	strb	r3, [r2, #0]
 80035fe:	e7ac      	b.n	800355a <_printf_i+0x126>
 8003600:	002a      	movs	r2, r5
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	9906      	ldr	r1, [sp, #24]
 8003606:	9805      	ldr	r0, [sp, #20]
 8003608:	9d07      	ldr	r5, [sp, #28]
 800360a:	47a8      	blx	r5
 800360c:	3001      	adds	r0, #1
 800360e:	d0ae      	beq.n	800356e <_printf_i+0x13a>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d415      	bmi.n	8003642 <_printf_i+0x20e>
 8003616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003618:	68e0      	ldr	r0, [r4, #12]
 800361a:	4298      	cmp	r0, r3
 800361c:	daa9      	bge.n	8003572 <_printf_i+0x13e>
 800361e:	0018      	movs	r0, r3
 8003620:	e7a7      	b.n	8003572 <_printf_i+0x13e>
 8003622:	0022      	movs	r2, r4
 8003624:	2301      	movs	r3, #1
 8003626:	9906      	ldr	r1, [sp, #24]
 8003628:	9805      	ldr	r0, [sp, #20]
 800362a:	9e07      	ldr	r6, [sp, #28]
 800362c:	3219      	adds	r2, #25
 800362e:	47b0      	blx	r6
 8003630:	3001      	adds	r0, #1
 8003632:	d09c      	beq.n	800356e <_printf_i+0x13a>
 8003634:	3501      	adds	r5, #1
 8003636:	68e3      	ldr	r3, [r4, #12]
 8003638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	42ab      	cmp	r3, r5
 800363e:	dcf0      	bgt.n	8003622 <_printf_i+0x1ee>
 8003640:	e7e9      	b.n	8003616 <_printf_i+0x1e2>
 8003642:	2500      	movs	r5, #0
 8003644:	e7f7      	b.n	8003636 <_printf_i+0x202>
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	08003789 	.word	0x08003789
 800364c:	0800379a 	.word	0x0800379a

08003650 <memmove>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4288      	cmp	r0, r1
 8003654:	d806      	bhi.n	8003664 <memmove+0x14>
 8003656:	2300      	movs	r3, #0
 8003658:	429a      	cmp	r2, r3
 800365a:	d008      	beq.n	800366e <memmove+0x1e>
 800365c:	5ccc      	ldrb	r4, [r1, r3]
 800365e:	54c4      	strb	r4, [r0, r3]
 8003660:	3301      	adds	r3, #1
 8003662:	e7f9      	b.n	8003658 <memmove+0x8>
 8003664:	188b      	adds	r3, r1, r2
 8003666:	4298      	cmp	r0, r3
 8003668:	d2f5      	bcs.n	8003656 <memmove+0x6>
 800366a:	3a01      	subs	r2, #1
 800366c:	d200      	bcs.n	8003670 <memmove+0x20>
 800366e:	bd10      	pop	{r4, pc}
 8003670:	5c8b      	ldrb	r3, [r1, r2]
 8003672:	5483      	strb	r3, [r0, r2]
 8003674:	e7f9      	b.n	800366a <memmove+0x1a>
	...

08003678 <_sbrk_r>:
 8003678:	2300      	movs	r3, #0
 800367a:	b570      	push	{r4, r5, r6, lr}
 800367c:	4d06      	ldr	r5, [pc, #24]	@ (8003698 <_sbrk_r+0x20>)
 800367e:	0004      	movs	r4, r0
 8003680:	0008      	movs	r0, r1
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	f7fd fb34 	bl	8000cf0 <_sbrk>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d103      	bne.n	8003694 <_sbrk_r+0x1c>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d000      	beq.n	8003694 <_sbrk_r+0x1c>
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	bd70      	pop	{r4, r5, r6, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	20000c48 	.word	0x20000c48

0800369c <memchr>:
 800369c:	b2c9      	uxtb	r1, r1
 800369e:	1882      	adds	r2, r0, r2
 80036a0:	4290      	cmp	r0, r2
 80036a2:	d101      	bne.n	80036a8 <memchr+0xc>
 80036a4:	2000      	movs	r0, #0
 80036a6:	4770      	bx	lr
 80036a8:	7803      	ldrb	r3, [r0, #0]
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d0fb      	beq.n	80036a6 <memchr+0xa>
 80036ae:	3001      	adds	r0, #1
 80036b0:	e7f6      	b.n	80036a0 <memchr+0x4>

080036b2 <memcpy>:
 80036b2:	2300      	movs	r3, #0
 80036b4:	b510      	push	{r4, lr}
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d100      	bne.n	80036bc <memcpy+0xa>
 80036ba:	bd10      	pop	{r4, pc}
 80036bc:	5ccc      	ldrb	r4, [r1, r3]
 80036be:	54c4      	strb	r4, [r0, r3]
 80036c0:	3301      	adds	r3, #1
 80036c2:	e7f8      	b.n	80036b6 <memcpy+0x4>

080036c4 <_realloc_r>:
 80036c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036c6:	0006      	movs	r6, r0
 80036c8:	000c      	movs	r4, r1
 80036ca:	0015      	movs	r5, r2
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d105      	bne.n	80036dc <_realloc_r+0x18>
 80036d0:	0011      	movs	r1, r2
 80036d2:	f7ff fc51 	bl	8002f78 <_malloc_r>
 80036d6:	0004      	movs	r4, r0
 80036d8:	0020      	movs	r0, r4
 80036da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036dc:	2a00      	cmp	r2, #0
 80036de:	d103      	bne.n	80036e8 <_realloc_r+0x24>
 80036e0:	f7ff fbde 	bl	8002ea0 <_free_r>
 80036e4:	2400      	movs	r4, #0
 80036e6:	e7f7      	b.n	80036d8 <_realloc_r+0x14>
 80036e8:	f000 f81b 	bl	8003722 <_malloc_usable_size_r>
 80036ec:	0007      	movs	r7, r0
 80036ee:	4285      	cmp	r5, r0
 80036f0:	d802      	bhi.n	80036f8 <_realloc_r+0x34>
 80036f2:	0843      	lsrs	r3, r0, #1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	d3ef      	bcc.n	80036d8 <_realloc_r+0x14>
 80036f8:	0029      	movs	r1, r5
 80036fa:	0030      	movs	r0, r6
 80036fc:	f7ff fc3c 	bl	8002f78 <_malloc_r>
 8003700:	9001      	str	r0, [sp, #4]
 8003702:	2800      	cmp	r0, #0
 8003704:	d0ee      	beq.n	80036e4 <_realloc_r+0x20>
 8003706:	002a      	movs	r2, r5
 8003708:	42bd      	cmp	r5, r7
 800370a:	d900      	bls.n	800370e <_realloc_r+0x4a>
 800370c:	003a      	movs	r2, r7
 800370e:	0021      	movs	r1, r4
 8003710:	9801      	ldr	r0, [sp, #4]
 8003712:	f7ff ffce 	bl	80036b2 <memcpy>
 8003716:	0021      	movs	r1, r4
 8003718:	0030      	movs	r0, r6
 800371a:	f7ff fbc1 	bl	8002ea0 <_free_r>
 800371e:	9c01      	ldr	r4, [sp, #4]
 8003720:	e7da      	b.n	80036d8 <_realloc_r+0x14>

08003722 <_malloc_usable_size_r>:
 8003722:	1f0b      	subs	r3, r1, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1f18      	subs	r0, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	da01      	bge.n	8003730 <_malloc_usable_size_r+0xe>
 800372c:	580b      	ldr	r3, [r1, r0]
 800372e:	18c0      	adds	r0, r0, r3
 8003730:	4770      	bx	lr
	...

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
